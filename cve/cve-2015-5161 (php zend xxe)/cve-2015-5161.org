* Goal
1) To Understand why vulnerable.
2) To Think how can we check that an application is vulnerable or not. 

* Postulation
What is PHP FPM ? And When does it used?
And How we know an application used that?

* INTRODUCTION
The application may be forced to open arbitrary files and/or network resources.
Exploiting XXE issues on PHP applications may also lead to denial of service or
in some cases lead to command execution. 

* Description

#+BEGIN_SRC php

  public static function scan($xml, DOMDocument $dom = null)
  {
      if (self::isPhpFpm()){
          self::heuristicScan($xml);
      }

      if(!self::isPhpFpm()){
          $loadEntities = libxml_disable_entity_loader(true);
          $useInternalXmlErrors = libxml_use_internal_errors(true);
      }

      // Load XML with network access disabled (LIBXML_NONET)
      $result = $dom->loadXml($xml, LIBXML_NONET);
      restore_error_handler();

      if(!self::isPhpFpm()){
          libxml_disable_entity_loader($loadEntities); 
          libxml_use_internal_errors($useInternalXmlErrors);
      }

      if (!$result){
          return false;
      }

      // Scan for potential XEE attacks using ENTITY, if not PHP-FPM
      if (!self::isPhpFpm()){
          foreach ($dom->childNodes as $child){
              if ($child->nodeType === XML_DOCUMENT_TYPE_NODE){
                  if ($child->entities->length >0){
                      require_once 'Exception.php';
                      throw new Zend_Xml_Exception(self::ENTITY_DETECT);
                  }
              }
          }
      }

      if (isset($simpleXml)){
          $result = simplexml_import_dom($dom);
          if (!$result instanceof SimpleXmlElement){
              return false;
          }
          return $result;
      }
      return $dom;

      

              
#+END_SRC

보고된 바에 의하면 libxml_disable_entity_loader 는 스레드 안전하지 않다고 한다.
(엔터티 로더 세팅이 FPM 프로세스에 의해 덮여쓰여질 가능성이 있다!!)

그래서 Zend에서는 현재 인터페이스가 fpm인지 판단한 후 fpm일 경우에는 libxml_disable_entity_loader 를 사용하지 않고, 
heuristicScan 펑션을 이용해서 엔터티 로더 기능을 OFF 한다. 

문제는 heuristicScan인데, 일단 코드를 보자.

#+BEGIN_SRC php
//---[library/Zend/Xml/Security.php ]---
 
    protected static function heuristicScan($xml)
    {
        if (strpos($xml, '<!ENTITY') !== false) {
            require_once 'Exception.php';
            throw new Zend_Xml_Exception(self::ENTITY_DETECT);
        }
    }
#+END_SRC

단순히 xml안에 ENTITY 라는 문자열이 포함되어 있으면 엔터티가 포함되어 있다고 판단하고 있다. 

이 것은 문자열 인코딩을 속임으로서 우회할 수 있다. XML 공격 문자열의 선언에는 UTF-8을 사용한다고 해놓고, 

실제로는 UTF-16 으로 인코딩하면 위의 코드를 우회할 수 있다.




* 참고

https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5161

https://www.exploit-db.com/exploits/37765/


