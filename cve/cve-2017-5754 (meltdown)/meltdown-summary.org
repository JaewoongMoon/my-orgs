* 개요
- OS 상의 커널 영역 메모리와 사용자 어플리케이션 메모리 영역 사이의 벽을 허물어버리는 공격
- 멜트다운은 "주소 공간 격리"라는 보안 전제 자체를 허물어버린다.
- 이제까지 발표된 보안 취약점들과는 근본적으로 다른 매우 심각한 취약점임
- 권한이 없어도 다른 프로세스나 클라우드 상의 다른 가상머신의 메모리를 읽을 수 있다.
- 메모리에서 암호화 키, 비밀번호, 개인 정보 등을 얻어낼 수 있다.
- 메모리에 값을 덮어쓰는 것은 불가

* 원리
- 95년 이후의 Intel CPU에는 속도를 높이기 위한 비순차 실행(Out-of-order execution)과 추측실행(Speculative execution)이라는 기능이 있음
- 위 기능의 버그로 인해 CPU의 캐시에 커널 메모리 영역의 정보가 남아있는 경우가 생김
- 이 캐시의 값을 얻어내는 부채널(side channel) 공격이 몇 가지 존재함
- 부채널 공격 중 Flush+Reload 공격은 의도적으로 예외를 일으키는 프로그램과 캐시에 접근하는 시간을 측정하는 프로그램을 조합하는 것으로 가능함
- 부채널 공격을 응용한 Covert Channel을 이용해 전체 메모리 덤프를 얻는 것이 가능함

* 공격이 가능한 전제조건
공격 패턴은 대략 세 가지 패턴이 예상됩니다.

1. 서버에 셸 접속해서 공격하는 경우
- 서버의 CPU가 멜트다운에 취약한 CPU일 것 (95년 이후의 대부분의 Intel CPU 등)
- 셸 접속이 가능할 것
- 쓰기/실행 가능한 폴더가 주어질 것 (관리자 권한이 없어도 공격가능합니다)

2. 웹 어플리케이션에 공격 코드를 심는 경우 (XSS 응용)
웹 페이지에 자바스크립트 멜트다운 코드를 삽입하여 해당 페이지를 방문하는 사용자의 웹 브라우저에서 해당 코드가 실행되게 만드는 방법
(방문자가 공격 대상이 됩니다)
- 웹 어플리케이션에 XSS 취약점이 있을 것
- 사용자 PC의 CPU가 멜트다운에 취약한 CPU일 것

=> 이 경우는 브라우저 패치가 이미 나와있고, 자동 업데이트 기능을 사용중이면 대응 완료

3. 웹 어플리케이션에 코드 실행 기능 (혹은 취약점)이 있는 경우
- Javascript(NodeJS 환경), JSP, PHP 등 프로그래밍 코드를 전송할 수 있고, 이 코드가 실행되는 환경일 것  (서버가 공격 대상이 됩니다)
- 서버의 CPU가 멜트다운에 취약한 CPU일 것

그 외 서버에서 구동중인 서비스가 취약한 버전이어서 어떤 형태로든 원격 코드 실행이 된다면 잠정적으로 모두 멜트다운에 취약함

* 영향 / 대응
- 이 공격은 하드웨어 버그와 관련이 있으므로  OS에 독립적이고 따라서 어떤 소프트웨어 취약점과도 관련이 없으며, 모든 OS상에서 실행가능하다.
- 하드웨어 교체만이 근본적 대응(but 비현실적)
- OS/SW 패치 등으로 공격을 아주 어렵게 만들 수 있음(현실적, but 시스템 성능에 영향줌)


* 참고자료
- 구글 프로젝트 제로팀(최초 보고자)의 레포트(영어) : https://meltdownattack.com/meltdown.pdf
- 원리에 대한 설명 (한국어) : https://pgr21.com/pb/pb.php?id=freedom&no=75348
- Javascript meltdown : https://react-etc.net/page/javascript-spectre-meltdown-faq
