#+TITLE: CVE-2018-6389 ユーザー・パッチの適用及び結果の検証
#+AUTHOR: jwmoon

* ユーザー・パッチの適用
** ユーザパッチの概要
- wp-login.phpでloadモジュールを使用しないように設定
- load-scripts.phpでscript-loader.phpを使用しないように設定
- load-styles.phpでscript-loader.phpを使用しないように設定

#+CAPTION: ユーザー・パッチのスクリプトの一部
[[./img/2-user-patch-code.png]]

** ユーザパッチ実行
- https://github.com/Quitten/WordPress/blob/master/wp-dos-patch.sh でパッチスクリプトをダウンロードする。
- このスクリプトをワードプレスがインストールされてる場所のルートパスにコピーする。
- ワードプレスのルートで次のコマンドを実行する

#+BEGIN_SRC bash
sudo bash wp-dos-patch.sh
#+END_SRC

パッチが成功した。

[[./img/2-user-patch-success.png]]

** WordPressのバージョンが4.4未満の場合
バージョンが4.4以上の場合は、次のステップを省略できる。

4.4未満であれば、次の3つの段階を経た後、スクリプトを実行する。

テスト環境のワードプレスは4.3.14版である。それ以下のバージョンでは、追加の手順が必要になることもある。

*** noop.php生成
パッチが成功するには、上記の3つのphpファイルのほかwp-admin/includes/noop.phpファイルが存在しなければならない。

該当ファイルは、ワードプレスのバージョン4.4（2015.12.8リリース）以後提供されるので、テスト環境（バージョン4.3.15）には存在しなかった。

したがって、パッチを実行するには、ワードプレスのバージョンを4.4以降にアップグレードするか、もしくはnoop.phpファイルを手動で作成する必要がある。

今回のテストでは、何の内容がないnoop.phpファイルを作成しておいた。

*** パッチスクリプトで6行目を変更
4.4以下のバージョンでは、以下の正規表現が正常に動作していない。したがって、次のように変更する。


~sed -i -e "s/^require( ABSPATH . WPINC . '\/script-loader.php' );$/require( ABSPATH . 'wp-admin\/admin.php' );/g" wp-admin/load-scripts.php~ を
~sed -i -e "s/^require(ABSPATH . WPINC . '\/script-loader.php');$/require( ABSPATH . 'wp-admin\/admin.php' );/g" wp-admin/load-scripts.php~
に変更する。

変更内容 : ~( ABSPATH . WPINC . '\/script-loader.php' )~ の前後スペースを削除

*** load-scripts.phpとload-styles.phpで必要な関数を削除
@ignoreと宣言された関数を削除する。

- load-scripts.php：14ラインから104ラインまで
- load-styles.php：14ラインから83ラインまで

*この手順を省略すると、管理者ページでJavaScriptとスタイルシートを使用することができなくなるので、欠かさず実行するようにする。*


** ソースコードの比較
ソースコードがどのように変わったのか見てみよう。

- wp-login.php
phpファイルの上部に ~define（ 'CONCATENATE_SCRIPTS、false）;~ が追加されました。

[[./img/2-user-patch-wp-login.png]]

- load-scripts.php
~require( ABSPATH . WPINC . '/script-loader.php' );~ が ~require( ABSPATH . 'wp-admin/admin.php' );~ に変わった。


#+CAPTION: パッチの適用前
[[./img/2-scripts-before.png]]

#+CAPTION: パッチの適用後
[[./img/2-scripts-after.png]]


- load-styles.php

~require( ABSPATH . WPINC . '/script-loader.php' );~ が ~require( ABSPATH . 'wp-admin/admin.php' );~ に変わった。

#+CAPTION: パッチの適用前
[[./img/2-styles-before.png]]

#+CAPTION: パッチの適用後
[[./img/2-styles-after.png]]



* 結果の確認
パッチの適用後、同じ要求（攻撃）を送信見る。

** 管理者ログイン前
#+CAPTION: JavaScriptの読み込み要求
[[./img/2-validation-no-login-req.png]]

#+CAPTION: JavaScriptのロード応答、302リダイレクト応答が返される。
[[./img/2-validation-no-login-res.png]]

** 管理者ログイン後
#+CAPTION: 同じJavaScriptのロード要求、セッションIDが設定されている。
[[./img/2-validation-login-req.png]]

#+CAPTION: JavaScriptのロード応答、正常にJavaScriptがロードされた。
[[./img/2-validation-login-res.png]]

* 結論
今回の脆弱性は、次の2つの条件のために可能だった。
1. ログインしなくてもloadモジュール（load-scripts.php、load-styles.php）を使用可能である。
2. loadモジュールでscript-loader.phpを使用する。

パッチの適用後、上記2つの条件が達成されていないことを確認した。
1. ログイン後にのみloadモジュールを使用できるようになった。
2. script-loader.phpを使用する部分が消えた。

これにより、ユーザー・パッチで、今回の脆弱性CVE-2018-6389の対応ができたことを確認した。

ただし速度向上のためのscript-loader.phpを使用しないようになったので、管理者ページで多少の読み込み速度の低下が予想される。

* 診断での活用
今回の研究をワードプレスのサイトを診断する時に利用することができる。

例えば、/wp-admin/load-scripts.phpあるいは/wp-admin/load-styles.phpを認証なしで使用することができている場合は、CVE-2018-6389の脆弱性の可能性があると報告することができる。


* Ref
- ユーザパッチコード : https://github.com/Quitten/WordPress/blob/master/wp-dos-patch.sh
