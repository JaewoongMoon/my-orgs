#+TITLE:Operating on Files
This section describes the basic Dired commands to operate on one file or several files. All of these commands are *capital letters*; all of them use the minibuffer, either to read an argument or to ask for confirmation, before they act. All of them let you specify the files to manipulate in these ways:
- If you give the command a numeric pefix arguement /n/, it operate on the next /n/ files, starting with the current file. (If /n/ is negative, the command operates on the -n files peceding the current line.)
- Otherwise, if some files are marked with '*', the command operates on all those files.
- Otherwise, the command operates on the current file only. 

Certain other Dired commands, such as ! and the '%' commands, use the same conventions to decide which files to work on. 

Commands which ask for a destination directory, such as those which copy and rename files or create links for them, try to guess the default target directory for the operation. Normally, they suggest the Dired buffer's default directory, but if the variable dired-dwim-target is non-nil, and if there is another Dired buffer displayed in the next windows, that other buffer's directory is suggested instead. 

Here are the file-manipulating Dired commands that operate on files. 

*m*
#+BEGIN_VERSE 
Mark the file or directory.
#+END_VERSE

*C /new/ <RET>*
#+BEGIN_VERSE 
Copy the specified files (dired-do-copy). The argument /new/ is the directory to copy info, or (if copying a single file) the new name. This is like the shell command *cp*.

If dired-copy-preserve-time is non-nil, then copying with this command preserves the modification time of the old file in the copy, like 'cp -p'.

The variable direc-recursive-copies controls whether to copy directories recursively (like 'cp -r'). The default is top, which means to ask before recursively copying a directory. 
#+END_VERSE

*D*
#+BEGIN_VERSE 
Delete the specified files (dired-do-delete). This is like the shell command rm.
#+END_VERSE

*R /new/ <RET>*
#+BEGIN_VERSE 
Rename the specified files (dired-do-rename). If you rename a single file, the arguement /new/ is the new name of the file. If you rename several files, the argment /new/ is the directory into which to move the files (this is like the shell command mv). 

Dired autumatically changes the visited file name of buffers associfated with renamed file so that they refer to the new names. 
#+END_VERSE







* Ref
https://www.gnu.org/software/emacs/manual/html_node/emacs/Operating-on-Files.html
