#+TITLE: Java Authentication and Authorization Service(JAAS) Reference Guide
* Introduction
The Java Authentication and Authorization Service (JAAS) was introduced as an optional package (extension) to the Java 2 SDK, Standard Edition (J2SDK), v 1.3. JAAS was integrated into the J2SDK 1.4.

JAAS can be used for two purposes:
- for authentication of users, to reliably and securely determine who is currently executing Java code, regardless of whether the code is running as an application, an applet, a bean, or a servlet; and
- for authorization of users to ensure they have the access control rights (permissions) required to do the actions performed.

JAAS implements a Java version of the standard Pluggable Authentication Module (PAM) framework. See *Making Login Services Independent from Authentication Technologies* for further information.

Traditionally Java has provided *codesource-based access controls* (access controls based on where the code originated from and who signed the code). It lacked, however, the ability to additionally enforce access controls based on who runs the code. JAAS provides a framework that augments the Java security architecture with such support.

JAAS authentication is performed in a /pluggable/ fashion. This permits applications to remain independent from underlying authentication technologies. New or updated authentication technologies can be plugged under an application without requiring modifications to the application itself. Applications enable the authentication process by instantiating a *LoginContext* object, which in turn references a *Configuration* to determine the authentication technology(ies), or *LoginModule(s)*, to be used in performing the authentication. Typical LoginModules may prompt for and verify a user name and password. Others may read and verify a voice or fingerprint sample.

Once the user or service executing the code has been authenticated, the JAAS authorization component works in conjunction with the core Java SE access control model to protect access to sensitive resources. Unlike in the J2SDK 1.3 and earlier, where access control decisions are based solely on code location and code signers (a *CodeSource*), in the J2SDK 1.4 access control decisions are based both on the executing code's CodeSource and on the user or service running the code, who is represented by a *Subject* object. The Subject is updated by a LoginModule with relevant *Principals* and credentials if authentication succeeds.


** Who Should Read This Document
This document is intended for experienced developers who require the ability to design applications constrained by a ~CodeSource~-based and ~Subject~-based security model. It is also intended to be read by LoginModule developers (developers implementing an authentication technology) prior to reading the *JAAS LoginModule Developer's Guide*.

You may wish to first read the *JAAS Authentication* and *JAAS Authorization* tutorials to get an overview of how to use JAAS and to see sample code in action, and then return to this document for further information.


** Related Documentation
This document assumes you have already read the following:
- *Java SE Security Architecture*
- *JAAS white paper*
- *Java SE Security Tutorial*

A supplement to this guide is the *JAAS LoginModule Developer's Guide*, intended for experienced programmers who require the ability to write a *LoginModule* implementing an authentication technology.

If you wish to learn more about the standard Pluggable Authentication Module (PAM) framework (JAAS implements a Java version of PAM), see *Making Login Services Independent from Authentication Technologies*.

The following tutorials for JAAS authentication and authorization can be run by everyone:
- JAAS Authentication Tutorial
- JAAS Authorization Tutorial

Similar tutorials for JAAS authentication and authorization, but which demonstrate the use of a Kerberos LoginModule and thus which require a Kerberos installation, can be found at
- JAAS Authentication
- JAAS Authorization

These two tutorials are a part of the *Java GSS-API and JAAS sequence of tutorials* that utilize Kerberos as the underlying technology for authentication and secure communication.

* Core Classes and Interfaces
** Common Classes
*** Subject
*** Prinicipals
*** Credentials
** Authentication Classes and Interfaces
*** LoginContext
*** LoginModule
*** CallbackHandler
*** Callback
** Authorization Classes
*** Policy
*** AuthPermission
*** PrivateCredentialPermission
* JAAS Tutorials and Sample Programs
* Appendix A: JAAS Settings in the java.security Security Properties File
* Appendix B: Example Login Configurations



* Ref
- https://docs.oracle.com/javase/8/docs/technotes/guides/security/jaas/JAASRefGuide.html
