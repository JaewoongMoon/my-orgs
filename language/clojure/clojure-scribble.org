

* 개요
clojure 를 가지고 놀아보면서 배운 점들을 두서없이 정리해보는 문서입니다. 


* 클로저의 평가 모델 (evaluation model)
다음 세 가지 구성요소를 이해하는 것이 키이다. 

- the reader
- the evaluator
- the macro expander

클로저는 두 단계로 이루어지는 평가 시스템을 가지고 있다. 

- 먼저 텍스트 소스 코드를 읽어서 클로저 데이터 구조를 만든다. 
- 그 다음 클로저 데이터 구조를 평가한다. 

예를들어 (+ 1 2) 라는 소스코드가 있을 때, 이 코드는 먼저 첫 번째 아이템이 +, 그리고 이어서 1 과 2가 들어있는 리스트 자료 구조로 변환된다. 
그리고 이 리스트는 클로저의 evaluator 로 전달 된다. evaluator는 + 함수를 찾아 이 함수에 1과 2를 전달한다. 

소스코드와 데이터 평가 사이에 이러한 관계를 가지고 있는 프로그래밍 언어를 /homoiconic(호모아이코닉)/ 하다고 한다. 



프로그래밍 언어는 작성된 코드를 머신 언어로 치환하기 위해 컴파일러나 인터프리터가 필요하다. 
이 과정에서 생성되는 것이 Abstract Syntax Tree (AST) 이다. AST는 evaluator 에게 제공하는 입력 값이라고 생각해도 좋다. 

대부분의 언어에서는 AST 에 접근하는 것이 불가능하다. 

프로그래밍 언어 공간과 컴파일러 공간은 완벽하게 분리되어 있어서 둘은 만날 수 없다. 

클로저에서는 리스트를 사용한 트리 구조로 AST가 표현되기 때문에 프로그래밍 언어에서 AST로 접근 가능하다. (리스트는 트리를 구성하기 위한 이상적인 자료 구조이다. 리스트의 첫번째 아이템은 트리를 구성하는 root로 표현되고 이어지는 아이템들은 가지(branch)로 표현할 수 있다. 중첩된 트리를 표현하려면 중첩된 리스트를 사용하면 된다.)

클로저의 AST 는 트리구조로 표현되는 리스트이고, 클로저 프로그램에서 접근가능하다. 

그리고 클로저의 evaluator는 자신에게 전달된 입력값이 어디에서 오는지 신경쓰지 않는다. 프로그래머가 작성한 코드에서 직접 evaluator를 호출해도 된다. (*eval* 함수를 사용한다.)







* 매크로 
** 매크로와 함수의 차이
- 함수의 파라메터는 함수로 전달되기 전에 평가(evaluate)된다. 
- 매크로의 파라메터는 평가되지 않은채 전달된다. 


