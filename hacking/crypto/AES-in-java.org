#+TITLE: 자바에서 블록 암호의 암호화/복호화 과정 분석
#+AUTHOR: jwmoon
#+DATE: 2018.05.10

* 개요
자바에서 AES/3DES 등의 암호화/복호화 코드를 가져다 쓰기야 많이 해봤지만 실제 각 코드가 무슨 일을 하는 것인지, 왜 필요한 것인지에 대해서는 잘 모르고 있었다. 이 기회에 정리해둔다. 

* 자바에서 블록암호의  암호화/복호화 과정
간단하게 표현하면 다음 네 단계를 거치게 된다. 

1. 키 생성 
- 유저가 입력한 값을 토대로 생성하거나 혹은 랜덤하게 생성한다. 이 때 키 사이즈를 지정할 수도 있다. 

2. 암호화/복호화 수행 객체(Cipher) 생성
- 이 때 암호 알고리즘, 운용모드, 패딩 종류(pkcs5, pkcs7 등)를 지정할 수 있다. 
- 암호 알고리즘은 꼭 지정해야 한다. 
- 운용모드나 패딩 종류는 지정하지 않는다면 기본 값이 사용된다.
- AES의 경우 기본 값은 AES/ECB/PKCS5Padding 이다. 

3. 초기화 작업을 수행
- 암호화/복호화 플래그, 키, 이니셜벡터를 파라메터로 해서 작업을 초기화(init)한다.
- 이니셜 벡터는 옵션이다. (ECB 모드는 이니셜벡터가 필요없다, 다른 모드는 필요)

4. 암호화/복호화 실행 
- 실제로 작업을 수행한다. 
- cipher.doFinal(byte[]);

* 암호화/복호화 관련 주요 클래스들
** SecretKey
암호화 키 인터페이스

** SecretKeySpec
SecretKey 인터페이스를 구현한 클래스. SecretKey 인터페이스를 구현한 클래스는 이외에도 DESKey, DESedeKey, KerberosKey 등이 있다. 

** Cipher
실제 암호화, 복호화를 수행하는 클래스

** IvParameterSpec
이니셜 벡터 클래스

** KeyGenerator
랜덤한 키를 생성해주는 클래스. 다음과 같이 사용한다. 

#+BEGIN_SRC Java
KeyGenerator generator = KeyGenerator.getInstance("AES");
SecureRandom random = SecureRandom.getInstance("SHA1PRNG");
generator.init(128, random);
Key secureKey = generator.generateKey();
#+END_SRC

- 참고로 PRNG는 "Pseudo Random Number Generator"의 약자
- 랜덤한 값을 생성하는 SHA1 해시 알고리즘이 필요한 이유는 무엇일까?


* 어떤 패딩을 사용해야 할까?
- 두 방식은 같은 패딩 방식이라고 한다. (패딩 값이 0x01이면 패딩은 1바이트, 패딩 값이 0x02이면 패딩은 2바이트...)
- *따라서 어느쪽을 쓰던 상관없다*. 
- pkcs5 패딩은 블럭이 공식적으로는 8바이트인 경우에만 사용하도록되어 있으나 많은 런타임 환경에서 그냥 사용하고 있고, 그에 따른 이슈도 없다고 한다.  
- pkcs7 패딩은 블럭이 1~255바이트인 경우 모두 사용가능 (따라서 pkcs5 패딩은 pkcs7 패딩의 서브셋이다.)
- pkcs5 패딩으로 적혀있는 소스 코드는 DES 를 사용하던 시절부터의 관습이라는 듯 하다.
- 아마도 DES 후에 다양한 블록 길이의 암호 알고리즘이 나오면서 pkcs7이 제정된 것이 아닌가 추측해본다. 

* ref
- 클로저에서 AES 암호화하기 : https://bakyeono.net/post/2013-09-29-clojure-aes.html
- 패딩 방식에 대해서 : https://crypto.stackexchange.com/questions/9043/what-is-the-difference-between-pkcs5-padding-and-pkcs7-padding/9044#9044
- AES를 이용한 128비트 공통키의 생성과 암호화 : http://jo.centis1504.net/?p=141


