
* XST (Cross Site Tracing)
** 개요
TRACE 메서드가 허용되어 있어 XST (Cross Site Tracing)공격이 성립할 가능성이 있습니다. 
TRACE 메서드가 허용된 서버는 HTTP 요청을 그대로 HTTP 응답에 포함해서 회신하게 됩니다. 
이 공격을 악용하면 XSS 방어수단 중 하나인 쿠키의 HttpOnly 속성을 우회할 수 있습니다. 

** 보안 임팩트
HTTP 응답에 포함되어 있는 쿠키정보나 베이직 인증 정보 등이 누출될 수 있습니다. 

** 대응방법
반드시 사용이 필요한 메서드 이외의 메서드는 사용을 제한하는 것이 좋습니다.
자세한 설정 방법은 별첨 가이드를 참고해주시기 바랍니다. 

* XST（Cross Site Tracing）
** 概要
TRACEメソッドが許可されており、XST（Cross Site Tracing）攻撃が成立する可能性があります。
TRACEメソッドが許可されたサーバーは、HTTP要求をそのままHTTP応答に含めて返信されます。
この攻撃を悪用するとXSSの防御手段の一つであるクッキーのHttpOnly属性をバイパスすることができます。

** セキュリティインパクト
HTTP応答に含まれているクッキー情報やベーシック認証情報が漏洩されます。

** 対応方法
必ず使用が必要なメソッド以外のメソッドは、使用を制限することを推奨します。
詳しい設定方法は、別添のガイドを参照してください。

* セッション固定攻撃
** 概要
ログインに成功した後、サーバーから発行されるセッションキーの値を予測することができ、セッションハイジャックの一種であるセッション固定攻撃（Session Fixation Attack）が成立する可能性があります。

** セキュリティインパクト
攻撃者が任意のユーザーの権限を取得することができます。

** 攻撃成立条件
攻撃者が、被害者が使用するセッションキーを指定できる必要があります。 （クライアント側のスクリプト（XSS）、ハイパーリンク、hiddenフィールド、メタタグなどが利用されます。）


** 攻撃シナリオ
1.攻撃者は、被害者がサイトにログインするときに使用するセッションキーを指定します。
2.被害者は指定されたセッションキーでログインを試みます。
3.攻撃者が、同じセッションキーを使用して、サーバーに接続することで、被害者の権限でサイトを利用することができます。

** 対応方法
ログインを成功すると、サーバーは、常に、新しいセッションを発行するようにします。

** 参考URL
https://www.owasp.org/index.php/Session_fixation


* X-Frame-Optionsヘッダ未設定
** 概要
- X-Frame-Optionsレスポンスヘッダは、ページがフレーム（<frame>、<iframe>、<object>など）内でレンダリングされるかどうかをブラウザに指示するために使用されます。
- クリックジェクキン（clikcjacking）攻撃を防ぐ手段として、このヘッダを使用することができます。

次のような値を設定することができます。

X-Frame-Options：DENY
X-Frame-Options：SAMEORIGIN
X-Frame-Options：ALLOW-FROM https://example.com/

各設定値の意味は次のとおりです。
- DENY：このページは、フレームの中でレンダリングされることを禁止
- SAMEORIGIN：同じソース（ドメイン）のページ内であれば、そのページがフレーム内にレンダリングされることを許可
- ALLOW-FROM：指定されたURIのページ内であれば、そのページがフレーム内にレンダリングされることを許可

** 参考URL
https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options


* Session/CSRF token in URL
** Issue Background
Sensitive information within URL may be logged in various locations, including the user's browser, the web server, and any forward or reverse proxy servers between the two endpoints.
URLs may also be displayed on-screen, bookmarked or emailed around by users. They may be disclosed to third parties via the Referer header when any off-site links are followed. 
Placing session tokens into the URL increases the risk that they will be captured by an attacker. 

URL 내에 포함된 민감한 정보는 사용자의 브라우저, 웹 서버 로그, 또는 리버스 프록시 서버 로그 등 다양한 위치에 기록될 수 있습니다.
URL에 세션 토큰/CSRF 토큰을 노출할 경우 공격자에게 알려질 위험이 높아집니다.

** Issue Remediation
Applications should use an alternative mechanism for transmitting session totkens, such as HTTP cookies or hidden fields in forms that are submitted using the POST method. 

토큰을 전달할 때는 POST 메서드를 사용하는 것을 추천합니다. 


** Detail
Many implementations of synchronizer tokens include the challenge token in GET (URL) requests as well as POST requests. 
This is often implemented as a result of sensitive server-side operations being invoked as a result of embedded links in the page or other general design patterns. 
These patterns are often implemented without knowledge of CSRF and an understanding of CSRF prevention design strategies.
While this control does help mitigate the risk of CSRF attacks, the unique per-session token is being exposed for GET requests. 
CSRF tokens in GET requests are potentially leaked at several locations: browser history, HTTP log files, network appliances that make a point to log the first line of an HTTP request, and Referer headers if the protected site links to an external site.


** ref
https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Disclosure_of_Token_in_URL



* Open redirection (DOM-based)

