* 개념

* 샘플 해킹
** 간단한 POC
Apache


*** PHP code
#+BEGIN_SRC php
<html>
	<body>
<?php
$xml = $_POST['xml'];
if ($xml){
	echo "input length: ".strlen($_POST['xml']);
	echo '<br>';
	$doc = simplexml_load_string($xml);
	}
?>
	<h1> XML Parser</h1>
	<form action="index.php" method='post'>
		<textarea name="xml" rows="12" cols="100">
		</textarea>
		<br>
		<input type="submit" size="55">
		<br>
		<?php echo $doc->testing; ?>
	 </form>
	</body>
</html>

#+END_SRC

*** 구동
형식 : php -S 0.0.0.0:8080 -t [directory] [directory]/index.php
#+BEGIN_SRC shell
$ php -S 0.0.0.0:8080 -t /var/www/xxe_poc /var/www/xxe_poc/index.php
#+END_SRC

*** 테스트 문자열

*** 공격 문자열



	
	
** 일반적인 방어방법 in  
* 실전 해킹
** 관련 CVE
** 해당 Zend 프레임웍
** 방어코드 in PHP
이렇게 방어가 되어있다는 것을 보여준다.
** 정말 안뚫릴까? 해킹 시연
** 왜 뚫렸는가?
** 제대로 막으려면?

* 참고 
http://hyunmini.tistory.com/66
https://depthsecurity.com/blog/exploitation-xml-external-entity-xxe-injection


