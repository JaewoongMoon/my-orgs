#+TITLE: Java 직렬화 공격 정리



* 클래스 직렬화/역직렬화 규칙 
Class가 Serialization/Deserialization을 통해 전달되기 위해서는 다음과 같이 몇 가지 규칙을 만족해야 한다. 

1. Serialization/Deserialization은 객체의 인스턴스 정보를 전송하는 것이기 때문에 전송측과 수신측 모두 classpath안에 *전달될 객체에 대한 정보(클래스 정보)를 갖고 있어야 한다*. 
2. 전송될 객체는 *java.io.Serializable을 implement* 해야 한다. 
3. 'transient'키워드가 표시된 field는 상태 정보가 전달되지 않는다. 
4. Serialization/Deserialization은 이미 생성된 *객체의 인스턴스를 복사* 하는 것이며 객체의 인스턴스를 새로 생성하는 것이 아니기 때문에 *Constructor가 실행되지 않는다*. 

* 원격 코드 실행 원리
직렬화가 단순히 인스턴스의 상태값을 이용해서 객체를 복사하는 것이라면 원격 코드가 어떻게 실행되는 것일까?

- Serializable 인터페이스를 구현하는 클래스에서 writeObject/readObject 메서드를 재정의한다. 
- 재정의한 메서드 내부에서 원격 코드를 실행하는 코드가 실행된다. 

그러나 현실 상황에서 원격 코드 실행이 되려면 한가지 제약사항이 더 있다. 위의 규칙에서 1번을 생각해본다. 송신측/수신측이 동일한 클래스 정보를 가지고 있어야 한다. 이 말은 송신자가 Serialiable 인터페이스를 구현했다고 해도 아무 객체나 전송할 수 없다는 뜻이다. 따라서 공격에 사용할 수 있는 클래스의 종류는 제한된다. 송신측 수신측 모두 알고있는 클래스가 취약하게 작성되어 있을 때 공격이 가능해진다. 

정리하면, 이 취약점은 직렬화 자체가 취약하기 때문에 발생하는 것이 아니라 *직렬화를 이용한 공격에 적합하게 작성된 클래스* 때문에 발생한다.

** 추가정보
- Serializable 인터페이스에는 정의된 메서드가 없다. 이 인터페이스를 구현하는 클래스는 직렬화가능하다라는 표시(flag)를 하기 위해서 사용된다. (이 것을 marker interface pattern 이라고 한다)
- writeObject/readObject 등은 개발자가 필요하다고 판단했을 때 재정의해서 쓰게 된다. 
- 재정의하지 않았다면 ObjectOutputStream 클래스의 writeObject 메서드나, ObjectInputStream의 readObject 메서드가 실행된다. 


** 취약한 클래스 특징
- writeObject/readObject 를 재정의하였다. 
- 위의 재정의한 메서드에서 임의의 메서드(주로 "Runtime.exec")를 실행할 수 있도록 작성되어 있다. 


* Apache Common Collections1 취약점 원리
- Apache commons-collection 에서 발생한 Java Deserialization 취약점에 사용된 취약한 클래스는 AnnotationInvocationHandler이다. 
- 이 클래스는 *readObject()메서드를 커스터마이징* 해서 다양한 클래스들과 연결되어 있고, 복잡한 호출과정을 통해 InvokerTransformer 클래스에 접근할 수 있다. 
- InvokeTransformer 클래스는 오브젝트의 인스턴스를 생성할 수 있는 클래스이며, 공격자는 이 클래스를 통해 "getMethod", "invoke", "getRuntime", "exec" 등의 문자열이 전달되는 클래스 인스턴스를 생성한 후 이 인스턴스를 직렬화하여 전송한다. 
- 수신 서버에서는 이 객체에 역직렬화되면서 AnnotationInvocationHandler 클래스의 readObject 메서드가 호출되고 결과적으로 invoke 함수가 Runtime.exe 를 호출하면서 시스템 명령어가 실행되는 것이다. 


* 대응방법
- SW(라이브러리) 보안 패치 적용
- 직렬화는 신뢰할 수 있는 영역 내에서만 사용되어야 한다. (유저와 서버 간의 직렬화 데이터 교환 금지)
- 인증 정보 등 중요한 정보가 포함된 클래스의 인스턴스를 직렬화를 통해서 전송해서는 안 된다. 
- 직렬화를 통해 전송되는 클래스는 화이트리스트/블랙리스트 정책에 의한 유효성 검증을 실시한다. (클래스에 대한 allow/disallow를 처리하기 위해서는 resolveClass()를 사용)
- Object의 타입 캐스팅 및 호출을 동적으로 처리하지 않는다. 


* 참고 자료
- 인포섹의 Java 역직렬화 공격 설명 블로그: https://m.blog.naver.com/PostView.nhn?blogId=skinfosec2000&logNo=220887425296&proxyReferer=https%3A%2F%2Fwww.google.co.jp%2F

