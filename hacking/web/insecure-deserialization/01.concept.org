* 공격개요
** Deserialization 공격 동향
OWASP TOP 2017에 신규 포함

Common-collections 취약점으로 한번 떠들썩했었음

최근 동향

CVE 발표 건수?



* 직렬화/역직렬화 개념
직렬화 개념은 Java에만 있는가?

직렬화는 대부분의 언어에서 지원한다. 
https://ko.wikipedia.org/wiki/%EC%A7%81%EB%A0%AC%ED%99%94


직렬화 : 메모리 상에 존재하는 객체를 어떤 데이터 포맷으로 변환하는 것 (나중에 쓰기위해)

역직렬화는 반대 : 데이터 포맷을 입력받아서 객체를 다시 만들어내는 것

왜 필요한가? / 언제쓰이는가?
	-데이터로서 보존할 때
	-통신할 때
	-예를들면, JSON 이나 XML형식으로 표현된 문자열도 직렬화의 한 예이다.
	-또한, 각 언어별로 직렬화 메카니즘이 존재. 이 때는 별도의 포맷으로 변환된다. 


JAVA에서 직렬화/역직렬화하는 방법
#+BEGIN_SRC java
package serialization;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;

/**
 * @brief	:참고 : http://flowarc.tistory.com/entry/Java-%EA%B0%9D%EC%B2%B4-%EC%A7%81%EB%A0%AC%ED%99%94Serialization-%EC%99%80-%EC%97%AD%EC%A7%81%EB%A0%AC%ED%99%94Deserialization
 * @author	: Jae-Woong Moon(mjw8585@gmail.com)
 * @Date	: 2017. 11. 22.
 */
public class TestClass {

	private static final String path = "user.ser"; //프로젝트 루트에 저장됨. 
	
	public static void main(String[] args) {
		serialize();
		deserialize();
	}
	
	public static void serialize(){
		try{
			FileOutputStream fos = new FileOutputStream(path);
			BufferedOutputStream bos = new BufferedOutputStream(fos);
			ObjectOutputStream out = new ObjectOutputStream(bos);
			
			User u1 = new User("User1", "1234", "ldd@naver.com", 30);
			User u2 = new User("User2", "5678", "teser@gmail.com", 25);
			
			ArrayList list =new ArrayList<>();
			list.add(u1);
			list.add(u2);
			
			out.writeObject(u1);
			out.writeObject(u2);
			out.writeObject(list);
			out.close();
			System.out.println("직렬화 완료");
		}catch(Exception e){
			e.printStackTrace();
		}
	}
	
	public static void deserialize(){
		try {
			FileInputStream fis = new FileInputStream(path);
			BufferedInputStream bis = new BufferedInputStream(fis);
			ObjectInputStream in = new ObjectInputStream(bis);
			
			User u1 = (User) in.readObject();
			User u2 = (User) in.readObject();
			ArrayList list = (ArrayList) in.readObject();
			
			System.out.println(u1.toString());
			System.out.println(u2.toString());
			System.out.println("count : " + list.size());
			System.out.println(list.toString());
			
			in.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}


#+END_SRC
 

직렬화된 파일
[[./img/java-serial-ex1.png]]

헥스 에디터로 열어본 모습
[[./img/java-serial-ex2.png]]


* 샘플 프로그램 공격
** 공격 원리
** 공격 페이로드 만들기
** 방어방법
*** 기본 방어방법
*** 방어 후 공격이 통하는지 시연


* 실제 라이브러리 공격
** Common-collections
** 취약한 라이브러리 소스
** 안전한 라이브러리 소스

* 진단에서의 활용 - Java Serial Killer


