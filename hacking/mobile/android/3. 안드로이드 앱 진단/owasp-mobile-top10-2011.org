#+TITLE: OWASP MOBILE top 10 분석

* 참고
- OWASP 리스트는 순서가 중요도를 반영한다. (중요도란 빈도와 심각성을 토대로 산출한 것)
- 발표될 때마다 순서의 변경이 조금씩 있다. 

* M1 : 불안전한 데이터 저장장치 (Insecure Data Storage)
** 개요
- 민감한 데이터(개인정보 등)가 보호되지 않은 상태로 남아 있음
- 로컬에 저장된 데이터 + 클라우드 동기화

** 원인
- 데이터를 암호화하지 않음
- 캐싱 데이터를 스토리지에 장기간 보관하기 위해 사용
- 취약하거나 과도한(전역) 권한 부여
- 플랫폼의 베스트-프랙티스들을 미활용

** 영향
- 데이터의 기밀성 손실
- 자격 인증서 노출
- 개인정보보호 위반
- 컴플라이언스 미준수

** 예방 수칙
- 반드시 꼭 필요한 것만 저장할 것
- 공개된 저장공간을 사용하지 말 것 (예: SD card)
- 보안컨테이너나 플랫폼이 제공하는 파일 암호화 API들을 이용할 것
- 파일들에게 전체 사용자 읽기 쓰기 권한을 부여하지 말 것


* M2 : 약한 서버측 제어 (Weak Server Side Controls)
** 개요
- 기존 WEB 부분과 동일한 내용

** 영향
- 데이터 기밀성 손실
- 데이터 무결성 손실


* M3 : 불충분한 전송 계층 보호 (Insufficient Transport Layer Protection)
** 개요
- 실제로 구글 클라이언트에도 HTTP 로 인가 헤더를 전송하는 취약점이 있었음

** 원인
- 전송 시 약하게 암호화된 데이터

** 영향
- 중간자 공격(MitM)
- 전송시 w/data 변조
- 데이터 기밀성 손실

** 예방 수칙
- 모든 민감한 데이터가 디바이스에서 전송될 때는 반드시 암호화되어야 함
- 이것은 통신사업자 네트워크, 와이파이, 심지어 NFC데이터까지도 포함한다.
- 보안 예외가 던져졌을 때, 이 것들이 일반적인 이유라고 하더라도 절대 무시하지 말 것. 

* M4 : 클라이언트 측 삽입공격 (Client Side Injection)
** 개요
- 애플리케이션들을 브라우저 라이브러리를 사용함
- XSS, HTML 인젝션, SQL 인젝션 등은 익숙할 것
- 새로운 공격들은 다음과 같다.
- 전화걸기 악용 + SMS , 앱 안의 지불시스템 악용 등

** 영향
- 기기 타협
- 전화 사기
- 권한 상승

** 예방 수칙
- 신뢰할 수 없는 데이터는 렌더링 혹은 실행전 제거, 회피
- SQL 사용시 Prepared Statement 사용
- 민감한 내부 기능을 하이브리드 웹 기능과 묶는 것을 최소화

* M5 : 부실한 권한 부여 및 인증 관리 (Poor Authorization and Authentication)
** 개요 
- 일부 앱들은 인증시 잠재적 위험 값들에 의지함(IMEI, IMSI, UUID)

** 영향
- 권한 상승
- 무단 액세스

** 예방 수칙
- 절대 디바이스ID 또는 서명자ID를 단독 인증자로 사용하지 말 것


* M6 : 부적절한 세션 처리 (Improper Session Handling)
** 개요
- 모바일 앱 세션들은 일반적으로 '엄청' 오래감
- 앱들은 다음 방법으로 세션을 유지
- HTTP 쿠키, OAuth 토큰, SSO 인증 서비스
- 나쁜 생각: 세션 토큰을 디바이스 식별자로 사용

** 영향
- 권한 상승
- 무단 액세스
- 라이센스 및 지불을 회피

** 예방수칙
- 사용자를 자주 재인증시키는 것을 두려워 하지 말 것
- 손실된/도난당한 디바이스에 있는 토큰을 신속히 무효화하여 안전케 할 것
- 검증된 토큰 생성 리소스로 높은 예측불가성을 활용할 것


* M7 : 신뢰할 수 없는 입력들에 대한 보안 결정들 (Security Decisions Via Untrusted Inputs)
** 개요
- 권한 및 보안 모델을 우회하기 위해 이용할 수 있음
- 비슷하지만 플랫폼에 따라 다름
- iOS - URL 스키마 악용
- Android - 인덴트 악용
- 인덴트란? 안드로이드에서 사진을 선택하거나 집에 전화한다, 포트를 개방한다 등의 액션을 기술하기 위한 메카니즘
- 공격 벡터: 악의적인 앱들, 클라이언트 측 삽입 공격
- iOS에서 Skype 로 전화하는 iframe삽입하는 공격이 있었음

** 영향
- 지불된 자원 소비
- 데이터 누수
- 권한 상승

** 예방수칙
- 입력 영역에서 발신자 권한 체크
- 허가 전에 사용자 입력을 받아서 부가적인 인증
- 권한체크를 실행할 수 없는 곳에서는 민감한 동작을 기동하기 위해 반드시 추가 단계를 거치게 할 것


* M8 : 주변 채널에 의한 데이터 누수 (Unintended Data Leakage)
** 개요
- 민감한 데이터가 의도치 않는 곳에서 처리
- 웹 캐시, 스크린샷, 각종 로그, 임시 디렉토리 등
- 로그에 유저 정보(id, pw 등)가 출력되는 경우 등

** 영향
- 데이터 무기한 보유
- 개인정보보호 위반

** 예방수칙
- 신용정보, 개인식별정보 혹은 다른 민감한 정보를 시스템 로그에 절대 기록하지 말 것
- 스크린샷을 만들기 전에 민감한 정보를 삭제할 것, 항목에 대한 키입력로그를 허용하지 말것, 그리고 웹컨텐츠에 캐싱을 막는 지시자를 이용할 것
- 서드파트 라이브러리들이 사용하는 데이터에 대해 주의 깊게 리뷰할 것


* M9 : 훼손된 암호 (Broken Cryptography)
** 개요
- 인코딩, 난독화, 직렬화 등은 암호화가 아니다.
- 혹은 제대로된 암호 라이브러리를 사용하였어도 구현이 잘못된 경우

** 영향
- 데이터 기밀성 손실
- 권한 상승
- 업무 로직 우회

** 예방 수칙
- 키가 암호화된 데이터와 함께 저장되면 모든 것이 무효화 됨
- 직접 만든 것 대신에 검증된 암호화 라이브러리를 사용할 것
- 당신의 플랫폼이 제공하는 장점을 활용할 것



* M10 : 민감한 정보 노출
** 개요
- 앱은 상대적으로 쉽게 리버싱할 수 있음
- 앱 소스코드에 하드코딩이 되어있는 경우
- API 키, 패스워드, 민감한 업무 로직 등
- 코드 난독화는 난이도를 높일 수 있으나, 위험을 제거하는 것은 아님

** 영향
- 자격 인증서 노출
- 지적 재산 노출

** 예방 수칙
- 개인 API키를 클라이언트 측에 저장하지 말 것
- 독자적이고 민감한 업무 로직은 서버에서 유지할 것
- 패스워드를 하드코딩할 타당한 이유는 거의 없음


* 참고자료
- owasp mobile top 10 한국어 번역본

