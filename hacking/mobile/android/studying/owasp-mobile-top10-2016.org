#+TITLE: OWASP MOBILE TOP 10 2016 분석

* 개요
- 2016 발표한 OWASP 모바일 TOP 10 취약점을 분석한 문서입니다.
- 순서대로 위험도를 나타냅니다.
- 2018년 5월 기준 가장 최신입니다.
- 다양한 케이스(시나리오)를 추가해서 보완해보려고 합니다.


* M1 : 적절하지 않은 플랫폼 사용 (Improper Platform Usage)
- 전통적인 OWASP TOP 10 취약점을 통해 사용할 수 있는 공격 벡터를 사용(XSS, 각종 Injection 등)
- 모바일 앱에서 사용하는 웹 서비스나 API가 노출되어야 함
- 서버측 API가 취약한 경우 (입력 값 검증 미비/출력값 이스케이핑 처리 미비 등)
- 대응 방법은 OWASP TOP 10 대응방법과 동일


* M2 : 취약한 데이터 저장소 (Insecure Data Storage)
- 안전하지 않은 데이터 저장소 및 의도하지 않은 데이터 누출
- SQL DB, 로그파일, XML 파일, 바이너리 데이터 저장소, 쿠키 저장소, SD 카드, 클라우드 동기화 등

** Case 1. 암호키가 앱 소스코드에 하드코딩되어 있는 경우
- 역컴파일했을 때 소스 코드안에 하드코딩된 키 값이 발견되는 경우가 있다. 
- 말할 것도 없이 취약하다. 
- 어떻게 개선해야 할까? [fn:1]

| 순번 | 방법                              | 내생각                                                                                                 |
|------+-----------------------------------+--------------------------------------------------------------------------------------------------------|
|    1 | 키를 난독화한다. (Obfuscated)     | 평문보다는 낫지만 언젠가는 키를 복원할 수 있을 것이다.                                                 |
|    2 | 키를 암호화한다. (Encrypted)      | 키를 암호화하기 위한 키는 어떻게 관리되는가?                                                           |
|    3 | 키를 계산해서 만든다.(Calculated) | 키를 만들기위한 키를 저장해둔다는 방법이군... 마찬가지로 소스코드 분석을 통해서 복원할 수 있지 않을까? |
|      |                                   |                                                                                                        |

- 디바이스(안드로이드/iOS)별 안전하게 데이터를 저장하기 위한 API를 사용하라고 한다. [fn:2]



* M3 : 취약한 통신 (Insecure Communication)
** 침투 테스터가 자주 발견하는 시나리오
*** 인증서 검사 부족
- 모바일앱은 서버가 제공한 인증서를 검사하지 않고 서버에서 제공한 인증서를 무조건 받아들인다.
- 이는 모바일 앱과 엔드 포인트 간의 상호 인증 기능을 파괴한다.
- 모바일 앱은 TLS 프록시를 통한 중간자 공격(man-in-the-middle attack)에 취약하다.

*** 약한 핸드쉐이크 협상
- 약한 암호화 알고리즘을 사용해서 SSL 핸드쉐이크 하는 경우

*** 개인정보유출
- SSL 대신 비보안 채널을 통해 개인 식별 정보를 전송하는 경우

** iOS 모범 사례
- 최신 버전의 iOS 기본 클래스는 SSL 암호화 길이 협상을 잘 처리한다. 
- 개발자가 이러한 기본 값을 무시하는 코드를 임시로 추가할 때 문제가 발생한다. 


** 안드로이드 모범 사례 
- 모든 인증서를 신뢰하는 코드를 삭제한다. 예를 들면 다음과 같은 코드이다.
- org.apache.http.conn.ssl.AllowAllHostnameVerifier 또는 SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER 와 같은 코드
- SSLSocketFactory를 확장한 클래스를 사용하는 경우, checkServerTrusted 메서드가 올바르게 구현되어 서버 인증서가 올바르게 검사되는지 확인한다.

* M4 : 취약한 인증 (Insecure Authentication)
- 앱 화면에서 인증이 있더라도 실제로 서버측 기능이 실행될 때는 인증을 하지 않는 경우 (다음 페이지로 넘어간 후에는 인증을 하지 않아도 실행되는 경우 등)
- 앱 내에서만 인증을 하고 서버측에서는 하지 않는 경우

** 보안대책
- 인증은 모두 서버측에서 처리
- 모바일 어플리케이션은 사용자가 모바일 어플리케이션 내에서 폐기할 수 있는 인증토큰을 사용해야 한다. 이렇게 하면 앱이 도난당하거나 분실된 기기에서의 무단 접근을 방지할 수 있다. 
- 사용자 인증시에 4자리 암호를 사용하지 않는다.( 더 긴 암호 사용)
- 영구 인증은 사전동의 형식으로 구현해야 하며 기본적으로 활성화되어 있으면 안된다.


* M5 : 불충분한 암호화 (Insufficient Cryptography)
** 시나리오
*** 취약한 키 관리 프로세스
- 키를 사용자가 읽을 수 있는 곳에 저장한다. (로컬 DB, 소스코드 하드코딩 등)
- 또한 바이너리 공격으로 키가 누출될 수도 있다. 

*** 커스텀 암호화 프로토콜 제작 및 사용



*** 취약한 알고리즘 및 미검증 알고리즘 사용
- RC2, MD4, MD5, SHA1 등



* M6 : 취약한 권한 부여 (Insecure Authorization)




* M7 : 취약한 코드 품질 (Client Code Quality)


* M8 : 코드 변조 (Code Tampering)


* M9 : 역공학 (Reverse Engineering)


* M10 : 불필요한 기능 (Extraneous Functionality)


* 참고 자료
- https://www.owasp.org/index.php/OWASP_Mobile_Security_Project#tab=Top_10_Mobile_Risks
[fn:1] https://medium.com/@vixentael/key-management-approaches-for-mobile-apps-57bb4db63906
[fn:2] https://github.com/OWASP/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md
