#+TITLE: SMALI 코드
#+AUTHOR: jwmoon

* 개요
- An assembler/disassembler for Android's dex format
- 어셈블러를 smali, 역어셈블러는 baksmali 라고 한다. 
- smali/baksmail 는 아이슬랜드어로 어셈블러/역어셈블러를 의미한다고 한다. 최초 고안자가 아이슬랜드 사람인가?
- dex 바이너리를 어셈블리어로 변환해준다. 


* smali 에서 사용되는 타입
| type 심볼 | 의미          |
|-----------+---------------|
| V         | void          |
| Z         | boolean       |
| B         | byte          |
| S         | short         |
| C         | char          |
| I         | int           |
| J         | long(64bit)   |
| F         | float         |
| D         | double(64bit) |



* smali 코드 구조 [fn:3]
주석을 유심히 본다. 

#+BEGIN_SRC smali
# class name, also determines file path when dumped
.class public Lcom/packageName/example;
 
# Object 를 상속함 (could be activity, view, etc.)
# note class structure is L<class path="">;
.super Ljava/lang/Object;
 
# original java file name
.source "example.java"
 
 
# these are class instance variables
.field private someString:Ljava/lang/String;
 
# finals are not actually used directly, because references
# to them are replaced by the value itself
# primitive cheat sheet:
# V - void, B - byte, S - short, C - char, I - int
# J - long (uses two registers), F - float, D - double
.field public final someInt:I  # the :I means integer
.field public final someBool:Z # the :Z means boolean
 
# Do you see how to make arrays?
.field public final someCharArray:[C
.field private someStringArray:[Ljava/lang/String;

 
# this is the <init> of the constructor
# it calls the <init> of it's super, which in this case
# is Ljava/lang/Object; as you can see at the top
# the parameter list reads: ZLjava/lang/String;I
# Z - boolean
# Ljava/lang/String; - java String object
#   (semi-colon after non-primitive data types)
# I - integer
#   (no semi-colon)
# also notice this constructor returns V, which means void
.method public constructor <init>(ZLjava/lang/String;I)V
 # declare how many variable spaces we will need
 # we can have: v0, v1, v2, v3, v4 and v5 as variables.
 # smali/baksmali by default uses .registers
 # but you can change this by using --use-locals
 # apktool uses --use-locals and --sequential-labels
 .locals 6
 
 # these are not always present and are usuaully taken
 # out by optimization/obfuscation but they tell us
 # the names of Z, Ljava/lang/String; and I before
 # when it was in Java
 .parameter "someBool"
 .parameter "someInt"
 .parameter "exampleString"
  
 # the .prologue and .line directives can be mostly ignored
 # sometimes line numbers are useful for debugging errors
 .prologue
 .line 10
  
 # p0 means parameter 0
 # p0, in this case, is like "this" from a java class.
 # we are calling the constructor of our mother class.
 # what would p1 be?
 invoke-direct {p0}, Ljava/lang/Object;-><init>()V
  
 # store string in v0
 const-string v0, "i will not fear. fear is the mind-killer."
  
 # store 0xF hex value in v0 (or 15 in base 10)
 # this destroys previous value string in v0
 # variables do not have types they are just registers
 # for storing any type of value.
 # hexadecimal is base 15 is used in all machine languages
 # you normally use base 10
 # read up on it:
 # http://en.wikipedia.org/wiki/Hexadecimal
 const/4 v0, 0xF
  
 # create instance of StringBuilder in v1
 new-instance v1, Ljava/lang/StringBuilder;
  
 # initialize StringBuilder with v2
 # notice it returns V, or void
 const-string v2, "the spice must flow"
 invoke-direct {v1, v2}, Ljava/lang/StringBuilder;-><init>(Ljava/lang/String;)V
  
 # append p1, which is our first paramater and is boolean
 # therefore we use append(Z)
 # notice how append returns a StringBuilder
 invoke-virtual {v1, p1}, Ljava/lang/StringBuilder;->append(Z)Ljava/lang/StringBuilder;
  
 # use move-result-object to store previous result in v1
 move-result-object v1
 # non-objects use move-result or move-result-wide
 
 # append v2 to our StringBuilder
 # notice how this append takes a string and not Z
 const-string v2, "some random string"
 invoke-virtual {v1, v2}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;
 move-result-object v1
   
 # call toString() on our StringBuilder
 # if you use Java you know that most objects have toString()
 invoke-virtual {v1}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;
 move-result-object v1
  
 # send our new string to the log.
 # this can be used to debug and can be picked up with ddms, logcat
 # or log collector. as an exercise look up what the d() function does
 # in the android developer documentation.
 const-string v0, "Tag"
 invoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I
 move-result v0
  
 # get the current time in milliseconds
 # J denotes a float or wide return value
 invoke-static {}, Ljava/lang/System;->currentTimeMillis()J
 move-result-wide v2
 # note!! since it is a wide value, it takes up v2 AND v3
 
 # so we must use v4 next
 # try to reuse variables if possible.
 const-wide/16 v4, 0x300 # this takes up v4 and v5
 div-long/2addr v2, v4   # divide v2 by v4
 long-to-int v2, v2      # convert v2 to an integer
  
 # since i wrote this in my head, there was no Java
 # compiler to add the .line's in the right places
 # but normally they would relate to actual Java lines
 # these are often removed with proguard optimization
 .line 12
  
 # store p1 as an instance variable (someBool) for this class
 # in java this may look like this.someBool = p1;
 iput-boolean p1, p0, Lcom/packageName/example;->someBool:Z
  
 .line 14
  
 # do the same for p3 and someInt
 iput p3, p0, Lcom/packageName/example;->someInt:I
  
  
 # get the value from p0.someInt
 iget v0, p0, Lcom/packageName/example;->someInt:I
  
 # now we will invoke a static method.
 # {} means empty parameters then the full package name followed by ->
 # then the method and it's return value. everything must be there.
 invoke-static {}, Lcom/packageName/example;->someMethod()Ljava/lang/String;
  
 # for different types of invoke-*, try this:
 # http://www.netmite.com/android/mydroid/dalvik/docs/dalvik-bytecode.html
 # invoke-virtual and direct take the class instance as a first parameter.
  
 .line 16
 return-void # meditate on the void.
.end method
 
# try and figure this one out
.method public static someMethod()Ljava/lang/String;
 # could i have used fewer variables?
 .locals 4
  
 new-instance v0, Ljava/lang/Long;
  
 invoke-static {}, Ljava/lang/System;->currentTimeMillis()J
 move-result-wide v1
  
 invoke-direct {v0, v1, v2}, Ljava/lang/Long;-><init>(J)V
  
 invoke-static {v0}, Ljava/lang/String;->valueOf(Ljava/lang/Object;)Ljava/lang/String;
 move-result-object v1
  
 # notice use of return-object and not just return
 return-object v1
.end method</class>
#+END_SRC

* smali 관련 플러그인
** 코드 에디터
- 안드로이드 스튜디오에서 Smali 코드를 syntax highlighting 해주는 smalidea 라는 플러그인이 있다고 한다. 
- 안드로이드 스튜디오에서 기본 플러그인으로 검색이 안되므로 별도 다운로드 후 설치해야 한다. 

*** 설치
1. https://bitbucket.org/JesusFreke/smali/downloads/ 에서 가장 최근의 smalidea.zip 을 다운로드 받는다. 
2. 안드로이드 스튜디오 플러그인 메뉴에서 "Install plugin from disk" 로 설치


** smali 코드 생성
Java2smail / Code2Smali 라는 플러그인이 있음


** 플러그인 설치법
안드로이드 스튜디오 에서 File > Settings... > Plugins 에서 검색을 통해 설치하거나 검색이 안되는 플러그인은 별도 다운로드 후 "Install plugin from disk..." 를 선택해서 설치할 수 있다. 

* Ref
[fn:1] https://blog.rebforpwn.com/index.php/2018/01/23/599/
[fn:2] https://i2sec.github.io/files/2017-10-20/study_dalvik_smali.pdf
[fn:3] http://androidcracking.blogspot.com/2010/09/examplesmali.html
