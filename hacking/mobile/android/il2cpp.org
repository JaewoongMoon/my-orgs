#+TITLE: IL2CPP 

* 개요
안드로이드 게임 진단 중 C# dll로 떨어지지 않는 게임에 대해서 조사한 결과를 정리하는 문서이다. 
주로 라인 게임 엔지니어가 정리한 내용[fn:1] 을 참고하였다. 

* Mono
- .NET Framework 호환 환경을 제공하는 오픈 소스 소프트웨어
- Unity는 이를 이용하여 멀티 플랫폼을 제공하고 있다. 


* IL2CPP
- IL (Intermidiate Language, 중간코드)을 C++파일(CPP)로 변환하는 툴이다. 
- 컴파일하면 libil2cpp.so 내에 게임 소스 코드가 저장된다. 
- 이 so파일을 디컴파일/분석하기 위해서는 유료인 IDA PRO가 가장 좋은 툴이다. 
- 참고로 메소드 명, 참조문자열은 \assets\bin\Data\Managed\Metadata\global-metadata.dat에 저장되고, libil2cpp.so 가 동적으로 읽게된다. 
- 따라서 IDA에서 so파일만 열어서는 메서드명과 참조문자열을 볼 수 없다. 그래서 구조체,오브젝트 베이스로 이 것들을 복원하는 IDA Script(unity_metadata_loader)를 사용한다. 
- MAC 에는 hopper 라는 디스어셈블러가 IDA PRO와 같은 기능을 제공하는 앱이 있다. 유료이다. 무료로 30분 동안은 사용가능하다. [fn:5]


* 리버싱 / 바이너리 코드 변조 과정 설명
IDA Pro가 없더라도 변조할 방법이 없는 것은 아니다. 

** 준비 과정
코드 변조에 필요한 재료를 준비할 필요가 있다. 

*** 덤프파일 준비
iOS 어플리케이션 파일인 ipa 파일을 얻을 수 있다면 il2cppdumper 를 사용해서 덤프파일을 얻을 수 있다. 
이 덤프파일에서는 주로 *심볼 정보(클래스, 메서드, 필드의 이름 및 주소)* 를 얻을 수 있다. 

자세한 것은 il2cppdumper 문서 참조. 

*** objdump 파일 준비
arm-none-eabi-objdump 를 사용해서 *so 파일의 어셈블리 코드* 를 얻을 수 있다. 

자세한 것은 objdump 문서 참조. 

** 코드 변조
코드 변조 과정은 다음과 같다. 
1. 덤프파일에서 변경하고자 하는 메서드를 찾아 주소를 확인
2. objdump 파일에 해당 주소로 이동해서 어셈블리 코드 확인
3. 어셈블리 코드를 원하는 코드로 변경한다. 이 때 어셈블리 코드를 헥사값로 변경해주는 다음 사이트를 참고한다. [fn:3]
4. il2cpp.so 파일을 헥사 에디터로 열어서 해당 주소의 바이너리 코드 변경
5. 재패키징 후 동작 테스트


** 함수의 처음과 끝은 어떻게 알 수 있을까?
보통 함수는 시작시에 push 명령어로 시작해서 pop 으로 끝난다. 

** 재패키징 하는 방법
apkchanger 를 사용한다. 

상세한것은 apkchanger 문서 참조. 





* Ref
[fn:1] https://engineering.linecorp.com/ja/blog/detail/110
[fn:2] https://blogs.unity3d.com/kr/2015/05/06/an-introduction-to-ilcpp-internals/
[fn:3] http://armconverter.com/
[fn:4] http://www.toves.org/books/armsub/
[fn:5] https://www.hopperapp.com/



