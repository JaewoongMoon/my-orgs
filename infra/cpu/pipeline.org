#+TITLE: Pipeline
* 개요/배경
- CPU가 하나의 명령어를 처리하는 과정을 여러가지의 작은 단계로 쪼개서 처리하는 방식
- 즉, 하나의 어셈블리 명령어(mov rbx 0x1 등)을 처리하기 위한 여러 가지의 세부 단계가 존재한다는 것
- 쉽게 설명하자면 파이프라인이 도입되기 전에는 1명이 하나의 일을 처음부터 끝까지 처리했다면 파이프라인이 도입 이후에는 한가지 작업만 할수있는 사람 여러명을 차례대로 놔두고 하나의 큰 작업을 조그만 작업으로 쪼개서 다음사람에게 순서대로 넘기는 방식으로 실행한다.(공장의 컨베이어 벨트를 연상하면 됨)
- 파이프라인을 사용함으로서 하나의 싸이클(Fetch~Commit까지)이 끝나는 것을 기다리지 않고 바로 다음 단계를 수행할 수 있으므로 속도가 비약적으로 향상됨

* 파이프 라인 단계
- 전통적인 설명은 가져오기(Fetch) -> 해석(Decode) -> 실행(Execute) -> 쓰기(Writeback)의 네 단계.
- 현대의 CPU는 최소 10단계는 넘어간다. 
- 단계를 쪼개면 쪼갤 수록 작업 하나를 실행하는 시간은 줄어들고, 결국 작업 하나를 처리할 수 있는 최소 시간 단위인 클럭(clock)이 올라간다. 
- 그러나 물리적인 법칙(발열문제)로 인해 클럭을 올리는 데는 한계가 있음 (4GHz의 벽)


* 8단계 파이프 라인
CPU관련 취약점들을 이해하기 위해서는 다음의 8단계 모델을 이해하면 된다. 

** 1. 가져오기(Fetch)
실행할 명령어를 주메모리에서 가져온다.

** 2. 해석(Decode)
명령어가 어떤 것인지 해독한다. 

** 3. 재명명(Rename)
- 명령어가 쓸 물리 레지스터를 할당한다. 
- 가령 레지스터 eax에 값을 저장하는 명령이라면, 실행이 완료할 때까지 *사용자에게 노출되지 않는 물리 레지스터*에 값을 저장하고, 명령어가 최종적으로 완료되면 그 때가 돼서야 값을 노출시킨다. 
- (재명명이라는 이름이 붙은 것은 레지스터의 이름이 부족함에 따른 것으로 보인다.)

** 4. 작업 지명(Dispatch)
- 명령어가 재정렬 버퍼(Re-Order Buffer, ROB)의 맨 뒤에 들어간다. 
- 다음 단계인 송출(Issue)->실행(Execute)->회신(Write back)까지는 나중에 온 명령어가 먼저 수행될 수 있는데 (Out-of-order execution), 최종적으로 명령어가 나갈 때는 원래 순서를 지켜서 나가므로 유저는 순서가 바뀐 것을 알아챌 수 없다. 

** 5. 송출 (Issue)
명령어가 실행(Execute)단계에 필요한 자원이 준비되면 보낸다. 

** 6. 실행 (Execute)
명령어를 실제로 수행한다. 가령 계산이나 주메모리에서 값을 읽어오거나 하는 것들이 이 때 수행된다. 

** 7. 쓰기 (Writeback)
- 전송완료 신호를 보내는 것. 
- 만들어낸 결과 값을 재명명단계에 할당 받은 물리 레지스터에 저장한다. 


** 8. 완료 (Commit)
- 사용자에게 노출되지 않는 물리 레지스터를 이제 사용자에게 노출시킨다.
 
* 파이프라인 중요 포인트
- 완료가 되기 전에는 사용자에게 명령어 수행의 결과가 노출되지 않는다는 점
- *가장 오래된 잘못 수행된 명령어부터 시작해서 이후 모든 명령어*를 파이프라인에서 지워버린다.



* 참고 
- 나무위키 CPU 게이트 문서 중 파이프라인 : https://namu.wiki/w/CPU%EA%B2%8C%EC%9D%B4%ED%8A%B8#rfn-25
- 멜트다운 원리에 대한 설명 중 파이프라인 : https://pgr21.com/pb/pb.php?id=freedom&no=75348
- 나무위키 파이프라인 문서 : https://namu.wiki/w/%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B8(CPU)?from=%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B8
- Complex Pipelining : https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-823-computer-system-architecture-fall-2005/lecture-notes/l12_ooo_pipes.pdf
