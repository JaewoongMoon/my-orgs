#+TITLE: DNS 취약점과 대책

* DNS 취약점
** 존 전송기능을 이용, 제3자에의한 등록정보 부정이용 가능성이 있다
- 일반적인 DNS 서버 프로그램은 초기 설정에 존 전송요구를 제한하지 않고 있어 제3자에 의한 공격을 용이하게 해주고 있다. 

** 부정한 정보가 캐시에 등록될 가능성이 있다
- 포트 번호를 변경하지 않고 53번 그대로 쓰는 서버가 많아서 캐시 포이즈닝 공격을 용이하게 해주고 있다. 

** 부정한 요청에 의해 서비스 불능상태가 될 가능성이 있다. 
- DNS서버 프로그램 구현상의 문제로 BOF 공격이나 Dos 공격을 받을 가능성이 있다.
k`

* DNS 취약점 대책
** DNS 서버 프로그램 버전업
- 패치 중에는 DNS 송신 포트번호를 랜덤하게 해주는 기능이 있어 DNS 캐시 포이즈닝 공격에 대한 대책이 된다.

** DNSSEC (DNS Security Extensions)
- DNS의 보안확장방식
- DNS 응답 서버가 자신의 비밀키를 이용해 디지털 서명을 추가
- 수신측 서버는 송신측 DNS 서버의 공개키를 이용해 디지털 서명을 검증

** 외부를 향한 존정보와 내부를 향한 존정보를 분리
- 외부 공개 DNS 서버와, 내부용 DNS 서버를 분리
- 공개용 DNS서버에는 내부의 존 정보를 일절 등록하지 않는다. 
- 내부 DNs서버에는 필요에 따라 공개 DNS서버에 등록된 존 정보를 등록한다.

** 콘텐츠 서버와 캐시 서버를 분리
- 위의 내용과 결합하면 총 네 대의 서버가 필요하다. 
- 공개 DNS 캐시 서버, 공개 DNS 컨텐츠 서버, 내부 DNS 컨텐츠 서버, 내부 DNS 캐시 서버

1. 공개 DNS 캐시 서버
- 존 정보를 등록하지 않는다. 
- 내부 캐시서버의 요구에만 응답하여 대리 DNS 요청을 수행

2. 공개 DNS 컨텐츠 서버
- 공개된 존 정보를 등록
- 대리 DNS 요청을 하지 않는다. 

3. 내부 DNS 캐시 서버
- 존 정보를 등록하지 않는다. 
- 요구에 응해서 자신의 캐시나 내부 컨텐츠 서버, 공개 캐시서버로의 문의를 대리 수행

4. 내부 DNS 컨텐츠 서버
- 내부 존 정보를 등록
- 내부 DNS 캐시서버로부터의 문의에만 대응
- 자신은 대리 DNS 요청을 수행하지 않는다. 

** 존 전송을 제한
- 인터넷으로부터 존 전송 요구를 받을 필요가 없다면, 공개 DNS서버로의 53/TCP 접근을 방화벽에서 차단한다.
- 존 전송은 세컨더리 DNS 서버로부터의 요청만 허용, 존 전송하는 데이터의 범위를 최소한으로 설정한다.

** 캐시 서버를 이용가능한 호스트의 범위를 제한
- 캐시서버를 이용가능한 호스트IP주소(네트워크 주소 혹은 개별 IP주소)를 등록

** 캐시서버로의 문의 수를 제한


** DNS서버 프로그램의 버전정보를 숨기기

* 512옥텟 제한 대응
- UDP 전송은 그 사양상 하나의 패킷의 최대 512옥텟까지만 전송가능
- 이 이상 넘어서면 정보가 잘렸다는 TC(Truncation)비트를 설정해서 클라이언트에 알려줌
- 클라이언트 측은 이 응답을 받으면 TCP53번 포트로 통신을 재개하고자 함 (이것은 TCP 폴백이라고 부름)
- TCP 폴백은 TCP를 사용하므로 UDP에 비해 서버에 부담이 많아지고, 응답시간이 길어진다는 문제가 있음
- 이 문제를 해결하기 위해 *EDNS0(Extension machanism for DNS verson 0)* 가 등장
- UDP패킷 사이즈를 최대 65,535 옥텟까지 확장할 수 있음
- 클라이언트 측에서는 OPT리소스 레코드를 설정하는 것으로 EDNS0 패킷임을 알림
- 물론 서버-클라이언트 양측 모두 EDNS0를 지원해야 이 방식으로 통신이 가능
- 최근 IPv6, DNSSEC, SPF, DKIM 등의 등장으로 DNS에서 512옥텟을 넘어서는 경우가 많이 생김
- 따라서, 위의 프로토콜을 사용시 EDNS0를 지원하는 것이 필수적임
