#+TITLE: 암호의 기초

* 암호의 개념
- 암호기술은 정보의 비닉과 정보의 인증 및 서명의 두 가지 기능이 있다. 
- 인증 및 서명은 해시 함수 및 디지털 서명으로 실현되어 있다. 


* 주요 암호 방식
- 고전적인 암호방식으로는 전치식암호와 환자식암호가 있다. 
- 안전성에 문제가 있기 때문에 현재는 쓰이지 않는다. 
- 현대에 쓰이는 암호방식을 분류하면  공통키암호방식, 공개키암호방식, 그리고 이 두가지를 조합한 하이브리드 방식이 있다.

** 공통키 암호 방식
- 암호화와 복호화에 같은 키를 사용하는 방식
- *대칭키 암호방식*, *비밀키 암호방식* 으로도 불린다.

#+CAPTION: 공통키 암호 방식과 공개키 암호 방식 비교
#+NAME:   tab:basic-data
| 암호방식       | 특징                                                                                                                                                               | 구조                                                                                                                                                                              |
|----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| 공통키암호방식 | 암호화와 복호화에같은 키를 사용하는 방식 (DES, IDEA 등)                                                                                                            | 발신자는 암호키를 사용해서 데이터를 암호화해서 보낸다. 발신자는 어떠한 수단을 사용해서 상대에게 안전하게 암호키를 보낸다. 암호화 데이터를 받은 상대는 입수한 암호키로 복호화한다. |
| 공개키암호방식 | 암호화와 복호화에 다른 키를 사용하는 방식. 동시에 생성한 한 벌의 키중 하나를 공개키로서 공개하고, 다른 하나를 비밀키로서 엄중하게 관리한다. (RSA, 타원곡선 암호등) | 발신자는 수신자의 공개키를 사용해서 데이터를 암호화해서 보낸다. 수진자는 자신의 비밀키로 받은 데이터를 복호화한다.                                                                |



*** 공통키 암호방식의 종류
크게 스트림 암호와 블록 암호로 구분할 수 있다. 
**** 스트림 암호
- 평문을 비트, 바이트, 또는 문자별로 처리하는 암호방식
- 대표적으로는 RC4가 있다. 
- 키스트림이라고 불리는 의사난수를 암호키로 사용한다. 
- 블록암호보다 처리를 단순화할 수 있기 때문에 *처리속도가 빠르다.*
- 암호화해도 데이터 사이즈가 증가하지 않으므로, 통신에서의 이용에 적절하다. 
- 참고로 최근엔 RC4를 권장하지 않고, KCipher-2를 권장한다. (CRYPTREC)

스트림 암호 특징 추가 
- https://security.stackexchange.com/questions/334/advantages-and-disadvantages-of-stream-versus-block-ciphers
- 제대로 구현하기는 블록암호보다 더 어렵다고 한다.
- 사용법에 따라 취약해지기기 쉽다.
- 무결성 검증/인증 같은 수단이 없다. 
- 이런 특징을 토대로 판단했을 때, 스트림 암호는 데이터의 총량을 알 수 없거나 계속 이어지는 데이터에 적용하기 적합하다. 즉, 네트워크 스트림이다. 
- 반대로 블록 암호는 데이터의 총량을 알 수 있는 경우에 적합하다. 파일, 데이터 필드, HTTP 요청/응답 프로토콜(전송 시작시 메세지 길이를 알 수 있으니까) 등

**** 블록 암호
- 평문을 일정사이즈(블록)로 분할해서 블록별로 암호화 처리를 하는 방식
- 대표적으로는 DES가 있다. 
- 블록의 사이즈는 보통 64비트(8바이트)나 128비트(16바이트)가 사용된다. 
- 블록단위로 암호처리를 하므로 블록 사이즈분의 데이터가 모일 때가지 처리가 시작되지 않는다. 따라서 대기 시간이 발생할 가능성이 있다. 
- 스트림 암호보다 처리가 복잡해진다. 
- DES, 3DES, AES, Camelia, IDEA 등이 있다. 
- 3DES, AES, Camelia 는 CRYPTREC 추천 암호 알고리즘이다. 
- *블록암호는 각 블록은 같은 암호키로 암호화했을 경우 해독이 쉬워진다는 단점이 있다.*
- 그래서 처리를 복잡하게 하고 암호의 강도를 높이기 위한 암호화방법(운용 모드)가 개발되었다. 
- 기본적으로 ECB이외의 각 방식은 전의 블록의 암호처리 결과를 사용해서 다음 블록의 암호처리를 수행한다. 
- 그 결과 각 블록은 전의 블록과 관련성을 가지게 되고, 해독을 하기 위해서는 암호데이터 전체를 처리하지 않으면 안되게 된다. 
- 만약 암호화하려는 정보가 블록 길이보다 길 경우에는 특정한 운용 모드가 사용된다. (블록 길이보다 짧은 평문은 운용 모드가 사용되지 않는다)
- 주요한 운용 모드는 다음과 같다. 

***** ECB (Eletronic Code Book)
- 암호 블록 사이의 관련성이 없다. 평문을 블록으로 나눠서 각 블록을 암호화한다. 
- 각 블록이 독립적이므로 병행처리가 가능해 속도는 빠르지만 암호강도가 낮아서 *사용하면 안되는 방식이다.*

***** CBC (Cipher Block Chaining)
- 이전의 평문 블록의 암호결과와 다음 평문블록을 XOR한 결과를 암호화하는 방식
- 1976년 IBM에 의해 개발됨
- 초기 블록의 암호화에는 초기화 벡터(Initial Vector, IV)가 쓰인다. 
- 암호의 강도가 높고,  널리 사용되고 있는 방식이다. 

***** CFB (Cipher Feedback)
- 초기에 IV를 암호화하고 그 것과 첫번째의 평문블록을 XOR한 결과를 암호화된 블록으로 하는 방식
- 암호 강도는 높다. 

***** OFB (Output Feedback)
- 초기에 IV를 암호화하고 그 것과 첫번째의 평문블록을 XOR한 결과를 암호화된 블록으로 한다. (여기까지는 CFB와 동일)
- 이어서 암호화된 IV를 또 암호화한 후 평문 블록과 XOR한 결과를 암호화된 블록으로 한다. 
- 이 단계를 계속 반복한다. 
- 암호의 강도가 높고, 각 블록의 독립성도 높다. (IV를 몇 번 암호화하는지를 이용해서 몇 번째 블록의 입력값인지를 알아낼 수 있기 때문)

블록 암호 특징 추가 
http://blog.acronym.co.kr/89

블록암호는 라운드 함수를 적용하는 방식에 따라 *SPN(Substitution-Permutation Network, 대입-치환 네트워크)* 방식과 *Feistel Network* 방식으로 나뉜다. AES 는 SPN 방식을 DES는 Feistel 방식을 쓴다.


** 공개키 암호 방식
- 암호화와 복호화에 각각 다른 키를 사용하는 방식
- 비대칭키 암호방식이라고도 불린다. 
- 동시에 생성된 한 쌍의 키 중 하나를 공개키로 공개하고, 다른 하나를 비밀키로 엄중하게 관리한다. 
- 주요한 공개키 암호 알고리즘은 RSA 와 타원곡선 암호가 있다. 
- RSA는 현재 1024 비트의 키가 널리 사용되고 있지만 보안상 위험해질 가능성이 있어서 2048 비트이상의 키 사용이 장려되고 있다. 


*** 공통키 암호/공개키 암호에서 필요한 키의 수
n명의 사람 간에 암호를 사용해서 통신할 때 필요한 키의 수
공통키 암호 : nC2 = n * (n - 1) / 2
공개키 암호 : 2n

** 하이브리드 방식
- 데이터 암호화처리에는 빠른 공개키 암호 방식을 사용
- 안전한 키 교환을 위해서 공개키 암호방식을 사용

** CRYPTREC 암호 리스트의 개요
- Cryptography Research and Evaluation Committees
- 전자정부장려암호의 안전성을 평가, 감시하고 암호기술의 적절한 구현법, 운용법을 조사, 검토하는 프로젝트
- 전자정부 구현 장려 암호 리스트가 CRYPTREC 암호 리스트임

* 해시함수, MAC, 핑거프린트
** 해시 함수
- 해시 함수란 임의의 길이의 입력 데이터를 고정길이의 비트열로 출력하는 함수이다. 
- 입력 데이터를 '메세지', 출력 데이터를 '메세지 다이제스트(MD)' 라고 부른다. 
- 해시 함수에는 다음과 같은 세 가지 성질이 요구된다. 

*** 역상저항성 (일방향성, Preimage Resistance, 原像計算困難性)
- 해시 값 y가 주어진 상태
- 해시 값 y를 알아도 원문 x를 알수 없는 성질

*** 제2역상저항성 (2nd-Preimage Resistance, 第２原像計算困難性)
- 해시 값 y에 더해 원문 x도 주어진 상태 
- 동일한 해시값이 나오는 다른 입력값 x'을 찾는 것은 계산적으로 불가능한 성질
- 역상 추측에 저항하는 성질

*** 충돌저항성 (Collision Resistance, 衝突発見困難性)
- 주어진 것이 없는 상태
- H(x) = H(x') 를 만족하는 x와 x'를 찾는 것이 계산상 불가능

여기서 제2역상 저항성과 충돌저항성이 어떻게 다른 것인지 헷갈리게 된다. 
사실상 같은 말을 하는 것으로 보이기 때문이다. 

차이점은 제2역상 저항성의 경우 x가 주어진 상태에서 다른 입력 값 x'을 찾는 시나리오(역상공격)에서의 저항성이고, 충돌저항성은 x와 x'를 자유롭게 선택할 수 있는 상태에서 찾는 시나리오(충돌 공격)에서의 저항성이라는 것이다. 

따러서 난이도는 충돌 공격보다 역상 공격이 더 높다고 알려져 있다. 

공격 난이도는 역상저항성 > 제2역상저항성 > 충돌저항성 순이다.

** MAC

** HMAC

** 핑거프린트(지장, 지문)


* diffie-Hellman 키 교환 알고리즘



* 참고
제2역상 저항성, 충돌 저항성 차이
- http://infosecguide.tistory.com/60
- https://crypto.stackexchange.com/questions/20997/second-pre-image-resistance-vs-collision-resistance
- https://ko.wikipedia.org/wiki/%EC%97%AD%EC%83%81_%EA%B3%B5%EA%B2%A9
