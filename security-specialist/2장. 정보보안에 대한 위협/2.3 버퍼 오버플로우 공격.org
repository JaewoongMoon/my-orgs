#+TITLE: 버퍼 오버플로우 공격
BOF 공격은 주로 C나 C++언어로 개발된 OS나 어플리케이션의 입력 데이터 처리에 관한 버그를 악용하여 컴퓨터 메모리에 부정한 데이터를 써서, 시스템 침입이나 관리자 권한을 취득하는 공격수법이다.

* BOF 공격의 구조
- BOF 공격은 스택영역에서 이루어 지는 것, 힙 영역에서 이뤄지는 것, 정적 메모리 영역에서 이뤄지는 것 등이 있음. 
- 가장 공격 난이도가 낮고, 자주 이루어지는 것이 스택영역의 BOF 이다. 
- 스택 영역은 서브 루틴 호출등으로 인해 자동적으로 확보되어 일시적으로 사용되는 데이터를 저장하는 영역. 메모리의 해제도 자동적으로 이뤄짐.
- 힙 영역은 malloc, new　연산자 등에 의해 동적으로 확보되며,　free 함수, delete연산자 등을 사용해서 명시적으로 해제해주어야 한다. 

** 스택의 개요
- LIFO(Last In First Out) 방식
- 스택은 서브루틴을 호출할 때, 서브루틴 실행 후 돌아갈 주소를 저장하는 용도로 쓰인다.
- 또한, 서브루틴 내에서 정의된 변수 등 일시적으로 사용되는 데이터를 저장하는 용도로도 쓰인다.
- 스택을 이용하면 서브루틴에서 서브루틴을 호출하는 것도, 자기자신을 호출(재귀호출)하는 것도 가능하다.
- 또한, 보통의 프로그램이나 초기 데이터가 메모리에 저장될　때는 낮은 주소부터 저장되지만, 스택에서는 거꾸로 높은 주소부터 저장된다. 
- 최근 Windows 에는 지정된 메모리 영역에서 코드 실행을 금지하는 기능인 DEP(Data Execution Prevention)기능이 구현되어 있음
- 그러나 이 기능은 return-to-libc 로 인해 우회 가능

** SFP
- Stack Frame Pointer
- 내부 변수에 접근하기 위한 스택 영역 상의 기준점으로서 사용된다.
- 함수 실행중에 내부 변수에 접근하는 경우 sfp 로부터의 상대주소를 사용한다. (sfp + 4 바이트 등) 

** BOF 방어
- 스택 BOF 를 막기 위해서 최근의 Windows OS 에는 지정된 메모리 영역에서 코드 실행을 금지하는 DEP (Data Execution Prevention) 기능이 포함되어 있다.
- 하지만 이 기능을 우회하는 방법으로 return-to-libc 라는 BOF 공격이 있다. 이 공격에서는 공격자가 메모리 상에 로드된 libc 공유 라이브러리 내의 특정 함수 (OS의 임의의 커맨드를 실행하는 system() 함수 등)를 호출하도록 리턴 주소를 바꾸는 방법을 사용한다. 이 경우 스택 영역의 코드를 실행하는 것이 아니기 때문에 DEP 기능이 무용지물이 된다.
- 이 때문에 최근의 OS에는 주소 공간 배치 랜덤화 (Address Space Layout Randomization : ASLR) 로 불리는 기술이 포함되어 있다. ASLR 은주소 공간에서 실행 파일, 라이브러리, 스택, 힙 등의 배치를 랜덤화하는 기술. 돌아갈 주소를 특정하는 것을 어렵게 한다.  

** 정수 오버플로
- 정수 값이 저장되는 공간의 허용치를 넘어선 값을 허용할 때 발생
- C/C++ 에서는 정수 오버플로가 발생해도 에러로 검출되지 않기 때문에 프로그램 개발자가 처리를 해주어야 한다. 


* setuid/setgid 속성을 악용한 BOF 공격
setuid/setgid 속성을 가진 커맨드에 사이즈가 큰 데이터를 보내서 BOF상태를 일으켜 관리자 권한을 손에 넣는 방법을 설명한다. 

** setuid/setgid 의 개요
- 프로그램 실행 시간 동안 해당 프로그램 소유자의 권한으로 실행되는 것
- /etc/passwd 등


* BOF 공격에 의한 영향
- 부정한 프로그램이 실행되는 경우, BOF 공격의 대상이 되는 프로그램과 동일한 권한으로 실행이 된다. 
- 특히 네트워크를 통해서 서비스는 프로그램은 관리자 권한으로 실행될 때가 많다. 
- 이 경우, 권한탈취 또는 권한승격 등이 가능해짐
- 또는 타겟 프로그램이 비정상 종료되는 경우 Dos 동격과 같은 영향을 주게 됨. 

* BOF 공격 대책
** 소프트웨어 이용자로서의 대책
1. OS/SW 버번 최신 업데이트 , 패치 등
2. 취약성 검사
3. 방화벽으로 불필요한 포트로의 접근을 금지
4. 서비스 제공중인 포트에 대해서는 IPS로 차단 (방화벽으로는 데이터부분을 볼 수 없으므로)
5. DEP 기능이 있는 OS 사용
6. 주소 공간 배치 랜덤화(ASLR) 기술이 구현된 OS 사용
7. setuid/setgid 가 설정된 프로그램 중 불필요한 프로그램은 삭제
8. 위에서 필요한 프로그램 중 setuid/setgid가 필요없으면 해당 속성을 삭제


** 소프트웨어 개발자로서의 대책
1. gets, strcpy, strcat 등 BOF 를 일으킬 위험성이 있는 함수를 사용하지 않는다. 
2. 입력 데이터의 길이 체크를 확실히 한다. 
3. 스택상에 있는 카나리아 코드로 BOF공격을 탐지한다. 
4. 이 것은 GNU C 컴파일러의 확장판인 StackGuard에 구현됨
- 스택의 함수와 리턴 주소 사이에 카나리아 코드라는 난수를 넣어놓고 함수 실행 후 해당 값이 변조되지 않았는지 체크하는 것. 
- 변조되면 프로그램 실행이 강제로 중지된다. 
5. BOF 방어 기능이 구현된 라이브러리를 사용한다. 
- 예를들면, Libsafe 등
- BOF를 일으킬 위험성이 있는 함수가 호출되는 것이 탐지되면, 함수 실행 순서를 바꿔서 먼저 BOF를 체크하는 함수를 실행한 후 원래 호출된 함수를 실행하는 방식
- Libsafe는 StackGuard와는 다르게 이미 컴파일된 프로그램에도 적용할 수 있다는 특징이 있음

