#+TITLE: 버퍼 오버플로우 공격
BOF 공격은 주로 C나 C++언어로 개발된 OS나 어플리케이션의 입력 데이터 처리에 관한 버그를 악용하여 컴퓨터 메모리에 부정한 데이터를 써서, 시스템 침입이나 관리자 권한을 취득하는 공격수법이다.

* BOF 공격의 구조
- BOF 공격은 스택영역에서 이루어 지는 것, 힙 영역에서 이뤄지는 것, 정적 메모리 영역에서 이뤄지는 것 등이 있음. 
- 스택 영역은 서브 루틴 호출등으로 인해 자동적으로 확보되어 일시적으로 사용되는 데이터를 저장하는 영역. 메모리의 해제도 자동적으로 이뤄짐.
- 힙 영역은 malloc, new　연산자 등에 의해 동적으로 확보되며,　free 함수, delete연산자 등을 사용해서 명시적으로 해제해주어야 한다. 

** 스택의 개요
- 선입선출 방식
 
- 최근 Windows 에는 지정된 메모리 영역에서 코드 실행을 금지하는 기능인 DEP(Data Execution Prevention)기능이 구현되어 있음
- 그러나 이 기능은 return-to-libc 로 인해 우회 가능


* setuid/setgid 속성을 악용한 BOF 공격
- 프로그램 실행 시간 동안 해당 프로그램 소유자의 권한으로 실행되는 것
- /etc/passwd 등


* BOF 공격에 의한 영향
- 부정한 프로그램이 실행되는 경우, BOF 공격의 대상이 되는 프로그램과 동일한 권한으로 실행이 된다. 
- 특히 네트워크를 통해서 서비스는 프로그램은 관리자 권한으로 실행될 때가 많다. 
- 이 경우, 권한탈취 또는 권한승격 등이 가능해짐
- 또는 타겟 프로그램이 비정상 종료되는 경우 Dos 동격과 같은 영향을 주게 됨. 

* BOF 공격 대책
** 소프트웨어 이용자로서의 대책
1. OS/SW 버번 최신 업데이트 , 패치 등
2. 취약성 검사
3. 방화벽으로 불필요한 포트로의 접근을 금지
4. 서비스 제공중인 포트에 대해서는 IPS로 차단 (방화벽으로는 데이터부분을 볼 수 없으므로)
5. DEP 기능이 있는 OS 사용
6. 주소 공간 배치 랜덤화(ASLR) 기술이 구현된 OS 사용
7. setuid/setgid 가 설정된 프로그램 중 불필요한 프로그램은 삭제
8. 위에서 필요한 프로그램 중 setuid/setgid가 필요없으면 해당 속성을 삭제


** 소프트웨어 개발자로서의 대책
1. gets, strcpy, strcat 등 BOF 를 일으킬 위험성이 있는 함수를 사용하지 않는다. 
2. 입력 데이터의 길이 체크를 확실히 한다. 
3. 스택상에 있는 카나리아 코드로 BOF공격을 탐지한다. 
4. 이 것은 GNU C 컴파일러의 확장판인 StackGuard에 구현됨
- 스택의 함수와 리턴 주소 사이에 카나리아 코드라는 난수를 넣어놓고 함수 실행 후 해당 값이 변조되지 않았는지 체크하는 것. 
- 변조되면 프로그램 실행이 강제로 중지된다. 
5. BOF 방어 기능이 구현된 라이브러리를 사용한다. 
- 예를들면, Libsafe 등
- BOF를 일으킬 위험성이 있는 함수가 호출되는 것이 탐지되면, 함수 실행 순서를 바꿔서 먼저 BOF를 체크하는 함수를 실행한 후 원래 호출된 함수를 실행하는 방식
- Libsafe는 StackGuard와는 다르게 이미 컴파일된 프로그램에도 적용할 수 있다는 특징이 있음

