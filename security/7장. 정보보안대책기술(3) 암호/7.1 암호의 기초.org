#+TITLE: 암호의 기초

* 암호의 개념
- 암호기술은 정보의 비닉과 정보의 인증 및 서명의 두 가지 기능이 있다. 
- 인증 및 서명은 해시 함수 및 디지털 서명으로 실현되어 있다. 


* 주요 암호 방식
- 고전적인 암호방식으로는 전치식암호와 환자식암호가 있다. 
- 안전성에 문제가 있기 때문에 현재는 쓰이지 않는다. 
- 현대에 쓰이는 암호방식을 분류하면  공통키암호방식, 공개키암호방식, 그리고 이 두가지를 조합한 하이브리드 방식이 있다.

** 공통키 암호 방식
- 암호화와 복호화에 같은 키를 사용하는 방식
- *대칭키 암호방식*, *비밀키 암호방식* 으로도 불린다.

#+CAPTION: 공통키 암호 방식과 공개키 암호 방식 비교
#+NAME:   tab:basic-data
| 암호방식       | 특징                                                                                                                                                               | 구조                                                                                                                                                                              |
|----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| 공통키암호방식 | 암호화와 복호화에같은 키를 사용하는 방식 (DES, IDEA 등)                                                                                                            | 발신자는 암호키를 사용해서 데이터를 암호화해서 보낸다. 발신자는 어떠한 수단을 사용해서 상대에게 안전하게 암호키를 보낸다. 암호화 데이터를 받은 상대는 입수한 암호키로 복호화한다. |
| 공개키암호방식 | 암호화와 복호화에 다른 키를 사용하는 방식. 동시에 생성한 한 벌의 키중 하나를 공개키로서 공개하고, 다른 하나를 비밀키로서 엄중하게 관리한다. (RSA, 타원곡선 암호등) | 발신자는 수신자의 공개키를 사용해서 데이터를 암호화해서 보낸다. 수진자는 자신의 비밀키로 받은 데이터를 복호화한다.                                                                |



*** 공통키 암호방식의 종류
크게 스트림 암호와 블록 암호로 구분할 수 있다. 
**** 스트림 암호
- 평문을 비트, 바이트, 또는 문자별로 처리하는 암호방식
- 대표적으로는 RC4가 있다. 
- 키스트림이라고 불리는 의사난수를 암호키로 사용한다. 
- 블록암호보다 처리를 단순화할 수 있기 때문에 *처리속도가 빠르다.*
- 암호화해도 데이터 사이즈가 증가하지 않으므로, 통신에서의 이용에 적절하다. 
- 참고로 최근엔 RC4를 권장하지 않고, KCipher-2를 권장한다. (CRYPTREC)

**** 블록 암호
- 평문을 일정사이즈(블록)로 분할해서 블록별로 암호화 처리를 하는 방식
- 대표적으로는 DES가 있다. 
- 블록의 사이즈는 보통 64비트나 128비트가 사용된다. 
- 블록단위로 암호처리를 하므로 블록 사이즈분의 데이터가 모일 때가지 처리가 시작되지 않는다. 따라서 대기 시간이 발생할 가능성이 있다. 
- 스트림 암호보다 처리가 복잡해진다. 
- DES, 3DES, AES, Camelia, IDEA 등이 있다. 
- 3DES, AES, Camelia 는 CRYPTREC 추천 암호 알고리즘이다. 
- *블록암호는 각 블록은 같은 암호키로 암호화했을 경우 해독이 쉬워진다는 단점이 있다.*
- 그래서 처리를 복잡하게 하고 암호의 강도를 높이기 위한 암호화방법(암호 모드)가 개발되었다. 
- 기본적으로 ECB이외의 각 방식은 전의 블록의 암호처리 결과를 사용해서 다음 블록의 암호처리를 수행한다. 
- 그 결과 각 블록은 전의 블록과 관련성을 가지게 되고, 해독을 하기 위해서는 암호데이터 전체를 처리하지 않으면 안되게 된다. 
- 주요한 암호 모드는 다음과 같다. 

***** ECB (Eletronic Code Book)
- 암호 블록 사이의 관련성이 없다. 평문을 블록으로 나눠서 각 블록을 암호화한다. 
- 각 블록이 독립적이므로 병행처리가 가능해 속도는 빠르지만 암호강도가 낮아서 *사용하면 안되는 방식이다.*

***** CBC (Cipher Block Chaining)
- 이전의 평문 블록의 암호결과와 다음 평문블록을 XOR한 결과를 암호화하는 방식
- 초기 블록의 암호화에는 초기화 벡터(Initial Vector, IV)가 쓰인다. 
- 암호의 강도가 높고,  널리 사용되고 있는 방식이다. 

***** CFB (Cipher Feedback)
- 초기에 IV를 암호화하고 그 것과 첫번째의 평문블록을 XOR한 결과를 암호화된 블록으로 하는 방식
- 암호 강도는 높다. 

***** OFB (Output Feedback)
- 초기에 IV를 암호화하고 그 것과 첫번째의 평문블록을 XOR한 결과를 암호화된 블록으로 한다. (여기까지는 CFB와 동일)
- 이어서 암호화된 IV를 또 암호화한 후 평문 블록과 XOR한 결과를 암호화된 블록으로 한다. 
- 이 단계를 계속 반복한다. 
- 암호의 강도가 높고, 각 블록의 독립성도 높다. (IV를 몇 번 암호화하는지를 이용해서 몇 번째 블록의 입력값인지를 알아낼 수 있기 때문)

** 공개키 암호 방식

*** 공통키 암호/공개키 암호에서 키의 수

** 하이브리드 방식
- 데이터 암호화처리에는 빠른 공개키 암호 방식을 사용
- 안전한 키 교환을 위해서 공개키 암호방식을 사용


** CRYPTREC 암호 리스트의 개요


* 해시함수, MAC, 핑거프린트
** 해시 함수

** MAC

** HMAC

** 핑거프린트(지장, 지문)


* diffie-Hellman 키 교환 알고리즘


