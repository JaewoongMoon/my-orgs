* 배경
- Dockerfile이라는 것을 어떻게 실행하는지 알고싶다.
- 환경을 구성하는 스크립트 같은데
- 그래서 Docker에 대해 알아보았다.

* 관련 개념
** 컨테이너 
- 가상화 기술의 하나로 격리된 공간에서 프로세스가 동작하는 기술
- 기존의 가상화는 주로 OS를 가상화했다(VMware나 VirtualBox 등).
- 이는 사용법이 간단한 반면, 무겁고 느린 단점이 존재했음
- 이후 CPU 가상화, 반가상화 등의 방식이 등장 (이는 클라우드 환경 구현에 활용됨)
- 이후 OS 위에서 프로세스만을 격리시켜 가상화하는 방식이 등장(가볍고 빠름)
- 하나의 서버 위에 다양한 구동환경(컨테이너)이 존재하는 것(마치 가벼운 VM을 여러 대 사용하는 것처럼)

** 이미지 
- 컨테이너 실행에 필요한 파일과 설정 값 등을 포함하고 있는 것
- 상태 값을 가지지 않고 변하지 않는다(Immutable)
- 컨테이너는 이미지를 실행한 상태라고 볼 수 있고, 추가되거나 변하는 값은 컨테이너에 저장된다. 
- 같은 이미지에서 여러 개의 컨테이너를 생성할 수 있다. 
- 예를들어 ubuntu 이미지는 ubuntu를 실행하기 위한 모든 파일들을 가지고 있고, MySQL이미지는 debian을 기반으로 MySQL을 실행하는데 필요한 파일과 명령어, 포트 정보 등을 가지고 있다. 
- *이미지는 컨테이너를 실행하기 위한 모든 정보를 가지고 있기 때문에 더 이상 의존성 파일을 컴파일하고 이것저것 설치할 필요가 없다.와우!*
- 도커 이미지는 Docker Hub에 등록하거나 아니면 직접 저장소를 만들어 관리할 수 있다. (Github처럼)
- 현재 공개된 도커 이미지는 50만개가 넘는다. 
- 이미지의 이름은 URL방식으로 관리하며 태그를 붇일 수 있다. 
- 태그 기능을 이용해 테스트나 롤백을 할 수 있다. 


** 레이어
- 이미지는 컨테이너를 실행하기 위한 모든 정보를 가지고 있기 때문에 보통 용량이 수백메가임
- 이미지가 변경될 때마다 새로 수백메가를 다운받는 것은 매우 비효율적임
- 이 문제를 해결하기 위한 것이 레이어임
- 이미지는 여러개의 레이어로 이루어지는데 공통인 레이어는 처음에 하나만 받아서 공용으로 사용되는 개념

** DockerFile
- 이미지를 만들기 위해 Dockerfile 이라는 파일에 자체 DSL(Domain-specific language)언어를 이용해서 이미지 생성 과정을 적는다. 



* 참고 
입문자를 위한 설명 Docker란? : https://subicura.com/2017/01/19/docker-guide-for-beginners-1.html

