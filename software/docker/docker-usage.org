#+Title: Docker 설치 및 컨테이너 실행
* 설치
#+BEGIN_SRC bash 
sudo apt-get update
curl -fsSL get.docker.com -o get-docker.sh
sudo sh get-docker.sh
#+END_SRC

* 설치확인
=sudo docker version=

* 컨테이너 실행
=docker run [이미지명]=
** 우분투 컨테이너
=docker run --rm -it ubuntu:16.04 /bin/bash=
-it: 키보드 입력을 위함
--rm : 프로세스가 종료되면 컨테이너가 자동으로 삭제됨


** 레디스 컨테이너
=docker run -d -p 1234:6379 redis=

-d: detached mode (백그라운드 모드)
-p: 포트번호. 호스트포트:컨테이너포트

** MySQL 컨테이너
=docker run -d -p 3306:3306 -e MYSQL_ALLOW_EMPTY_PASSWORD=true --name mysql mysql:5.7=
-e: 환경변수 설정 값
--name : 컨테이너의 이름을 지정(생략하면 도커가 알아서 지어준다)

테스트 (아래 mysql 커맨드를 실행하기 위한 mysql 클라이언트 프로그램은 설치되어 있어야 함)
#+BEGIN_SRC bash 
mysql -h127.0.0.1 -uroot
show databases;
#+END_SRC

** 워드프레스 컨테이너
먼저 위의 MySQL 컨테이너에서 데이터 베이스를 생성
#+BEGIN_SRC bash
# create mysql database
$ mysql -h127.0.0.1 -uroot
create database wp CHARACTER SET utf8;
grant all privileges on wp.* to wp@'%' identified by 'wp';
flush privileges;
quit

# run wordpress container
docker run -d -p 8080:80 \
  --link mysql:mysql \
  -e WORDPRESS_DB_HOST=mysql \
  -e WORDPRESS_DB_NAME=wp \
  -e WORDPRESS_DB_USER=wp \
  -e WORDPRESS_DB_PASSWORD=wp \
  wordpress
#+END_SRC

위의 명령어 실행 후 웹 브라우저에서 localhost:8080으로 들어가 워드 프레스가 잘 구동되었는지 확인해본다. 


* 컨테이너 목록 확인하기
- 현재 실행중인 컨테이너들을 확인할 수 있다. 
- -a 옵션으로 모든 컨테이너를 확인할 수 있다. 

=docker ps [OPTIONS]=

* 컨테이너 중지하기 
=docker stop [OPTIONS] CONTAINER [CONTAINER...]=

참고로 도커 ID는 중복되지 않는다면 처음 몇 자만 입력해도 된다.

* 로그 보기
=docker logs [OPTIONS] CONTAINER=

* 이미지 목록보기
=docker images=


* Dockerfile이 있을 때 이미지 만들기
Dockerfile이 있는 디렉토리로 이동 후 

=docker build -t [이미지명] .=



* 참고
초보를 위한 도커 안내서 - 설치하고 컨테이너 실행하기 : https://subicura.com/2017/01/19/docker-guide-for-beginners-2.html

